/**
 * Snippets script extract snippet code between comments tagged by @code(name)...@end(name)
 * and generate snippets list in src/snippets
 */
const glob = require('glob');
const fs = require('fs');

const regex = /\/\/\s*@code\((?<name>[-:\w]+)\)\s*(\s*return\s*)?(.*)\/\/\s*@end\((\k<name>)\)/gs;

class SnippetBuilder {

    constructor() {
        this.snippets = {};
    }

    /**
     * 
     * @param {string} name 
     * @param {string} code 
     */
    register(name, code) {
        if(name in this.snippets) {
            throw new Error("Snippet name already in use, must be unique");
        }
        this.snippets[name] = code;
    }

    /**
     * 
     * @param {string} code 
     * @returns 
     */
    extract(code)  {
        const p = code.matchAll(regex);
        if(!p) {
            return undefined;
        }
        Array.from(p).forEach(m=>{
            const name = m[1];
            const snippet = m[3];
            this.register(name, snippet);
        });
    }

    state() {
        console.log("Found %d snippets", Object.keys(this.snippets).length);
    }

    toCode() {
        const code = [
            '/* This file is generated by scripts/snippet.js do not edit by hand',
            '* To define a snippet, wrap the code by the comments tag',
            '* // @code(snippetName) ',
            '*   ... you code snippet',
            '* // @end(snippetName)',
            '*',
            '* The snippetName must be unique (you can use -, : and word characters, like "item:my-snippet" ',
            '*/',
            '',
            ' export const snippetsData = '
        ];
    
        var txt = code.join("\n") + JSON.stringify(this.snippets, undefined, 1) + ';';

        return txt;
    }
}

const generate = ()=>{
    const files = glob.sync('src/**/*');

    const builder = new SnippetBuilder();

    files.forEach(file => {
        const stat = fs.statSync(file);
        if(stat.isDirectory()) {
            return;
        }
        const code = fs.readFileSync(file);
        try {
            builder.extract(code.toString());
        } catch(e) {
            console.error("Error reading "+file, e);
        }
    });

    builder.state();

    fs.writeFileSync('src/snippets/snippets.js', builder.toCode());
}

module.exports = generate;