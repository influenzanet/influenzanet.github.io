"use strict";(self.webpackChunkifn_survey_handbook=self.webpackChunkifn_survey_handbook||[]).push([[78],{3905:(e,t,n)=>{n.d(t,{Zo:()=>u,kt:()=>f});var a=n(7294);function i(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function r(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);t&&(a=a.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,a)}return n}function o(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?r(Object(n),!0).forEach((function(t){i(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):r(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function s(e,t){if(null==e)return{};var n,a,i=function(e,t){if(null==e)return{};var n,a,i={},r=Object.keys(e);for(a=0;a<r.length;a++)n=r[a],t.indexOf(n)>=0||(i[n]=e[n]);return i}(e,t);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);for(a=0;a<r.length;a++)n=r[a],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(i[n]=e[n])}return i}var l=a.createContext({}),c=function(e){var t=a.useContext(l),n=t;return e&&(n="function"==typeof e?e(t):o(o({},t),e)),n},u=function(e){var t=c(e.components);return a.createElement(l.Provider,{value:t},e.children)},d="mdxType",m={inlineCode:"code",wrapper:function(e){var t=e.children;return a.createElement(a.Fragment,{},t)}},p=a.forwardRef((function(e,t){var n=e.components,i=e.mdxType,r=e.originalType,l=e.parentName,u=s(e,["components","mdxType","originalType","parentName"]),d=c(n),p=i,f=d["".concat(l,".").concat(p)]||d[p]||m[p]||r;return n?a.createElement(f,o(o({ref:t},u),{},{components:n})):a.createElement(f,o({ref:t},u))}));function f(e,t){var n=arguments,i=t&&t.mdxType;if("string"==typeof e||i){var r=n.length,o=new Array(r);o[0]=p;var s={};for(var l in t)hasOwnProperty.call(t,l)&&(s[l]=t[l]);s.originalType=e,s[d]="string"==typeof e?e:i,o[1]=s;for(var c=2;c<r;c++)o[c]=n[c];return a.createElement.apply(null,o)}return a.createElement.apply(null,n)}p.displayName="MDXCreateElement"},3901:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>l,contentTitle:()=>o,default:()=>m,frontMatter:()=>r,metadata:()=>s,toc:()=>c});var a=n(7462),i=(n(7294),n(3905));const r={sidebar_label:"User Management Service"},o="User Management Service",s={unversionedId:"system/services/user-service",id:"system/services/user-service",title:"User Management Service",description:"User management service is responsible to manage User accounts and authentication.",source:"@site/docs/system/services/user-service.md",sourceDirName:"system/services",slug:"/system/services/user-service",permalink:"/docs/system/services/user-service",draft:!1,editUrl:"https://github.com/influenzanet/survey-handbook/docs/system/services/user-service.md",tags:[],version:"current",frontMatter:{sidebar_label:"User Management Service"},sidebar:"systemSidebar",previous:{title:"Installation",permalink:"/docs/system/installation"},next:{title:"Repositories",permalink:"/docs/system/repositories"}},l={},c=[{value:"User Account Data structure",id:"user-account-data-structure",level:2},{value:"User Service",id:"user-service",level:2},{value:"Golang Implementation",id:"golang-implementation",level:2},{value:"Service configuration",id:"service-configuration",level:2},{value:"Database connexions",id:"database-connexions",level:3},{value:"Authentication settings",id:"authentication-settings",level:3},{value:"Service Connection",id:"service-connection",level:3},{value:"Parameters for User services behaviors",id:"parameters-for-user-services-behaviors",level:3},{value:"WeekDay assignation",id:"weekday-assignation",level:4}],u={toc:c},d="wrapper";function m(e){let{components:t,...n}=e;return(0,i.kt)(d,(0,a.Z)({},u,n,{components:t,mdxType:"MDXLayout"}),(0,i.kt)("h1",{id:"user-management-service"},"User Management Service"),(0,i.kt)("p",null,"User management service is responsible to manage User accounts and authentication."),(0,i.kt)("p",null,"User Account contains information about a user "),(0,i.kt)("p",null,"Non exhaustive list of "),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},"AccountID : Uniquely idenfity the account, and is used as login. Usually email address"),(0,i.kt)("li",{parentName:"ul"},"List of Profiles, each profiles define participants with avatar and nickname and ")),(0,i.kt)("p",null,"Profiles define participants associated with the account. In the User Service only potentially identifying fields are registered like a nickname (could be a real name) and an avatar (image name selected by participant that could indirectly give little information about the participant)."),(0,i.kt)("p",null,"Profiles are not directly connected to the response data, but Profile Id are mapped to a ParticipantID using a Mapping operator in the ",(0,i.kt)("a",{parentName:"p",href:"/docs/survey-handbook/study-service/"},"Study Service"),"."),(0,i.kt)("h2",{id:"user-account-data-structure"},"User Account Data structure"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-ts"},"interface User {\n    account: {\n        type: string // Type of account 'email' for email authentication type\n        accountID: string // ID of the account, used as login\n        accountConfirmedAt: number // Timestamp of the confirmation of the account (when confirmation link is clicked in email sent on account creation )\n        password: string // Hashed password (using Argon2)\n        authType: string \n        preferredLanguage: string // Language code of the preferred to use as default in the web interface\n    },\n    roles: string[] // List of main roles of the account `PARTICIPANT`, `RESEARCHER`, `ADMIN`\n    timesptamps: {\n\n    },\n    profiles: Profile[], // List of participant associated with the account\n    contactPreferences: {\n            subscribedToNewsletter: bool,\n            SendNewsletterTo: string[],\n            subscribedToWeekly: bool\n            receiveWeeklyMessageDayOfWeek: number\n    }\n    contactInfos: ContactInfo[]\n}\n\ninterface Profile {\n    _id?: string // ProfileID, used to \n    alias?: string // Participant's nickname\n    consentConfirmedAt: number \n    createdAt: number\n    avatarID?: string // Name of the image selected for this participant\n    mainProfile: boolean // if True, this is the \"main\" profile, \n}\n\ninterface ContactInfo {\n    _id: string // Id of contact, used in contactPreferences.SendNewsletterTo\n    type: string // Kind of contact, 'email','phone'\n    confirmedAt: number // Timestamp of verficiation, 0 = not verified\n    confirmationLinkSentAt: number // Timestamp of the last verification email sent\n    email?: string\n    phone?: string\n}\n\n")),(0,i.kt)("h2",{id:"user-service"},"User Service"),(0,i.kt)("p",null,"Features provided by the User Service"),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},"Create and update User account"),(0,i.kt)("li",{parentName:"ul"},"Validate account creation by confirmation email"),(0,i.kt)("li",{parentName:"ul"},"Validate User contact info by sending confirmation email"),(0,i.kt)("li",{parentName:"ul"},"Manage Authentication Tokens"),(0,i.kt)("li",{parentName:"ul"},"Manage Password Reset endpoint"),(0,i.kt)("li",{parentName:"ul"},"Manage Temporary tokens")),(0,i.kt)("p",null,"Inside the service some time based operation can be "),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},"Cleanup unverified users after a delay"),(0,i.kt)("li",{parentName:"ul"},"Send Reminder to confirm account creation")),(0,i.kt)("h2",{id:"golang-implementation"},"Golang Implementation"),(0,i.kt)("p",null,"The golang implementation of ",(0,i.kt)("a",{parentName:"p",href:"https://github.com/influenzanet/user-management-service"},"https://github.com/influenzanet/user-management-service")),(0,i.kt)("h2",{id:"service-configuration"},"Service configuration"),(0,i.kt)("p",null,"User management service is configured using Environment variables."),(0,i.kt)("p",null,"Environment list is defined in ",(0,i.kt)("a",{parentName:"p",href:"https://github.com/influenzanet/user-management-service/blob/master/build/docker/example/user-management-env.list"},"https://github.com/influenzanet/user-management-service/blob/master/build/docker/example/user-management-env.list")),(0,i.kt)("h3",{id:"database-connexions"},"Database connexions"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-bash"},"USER_DB_CONNECTION_STR=<mongodb-atlas-or-other-server-e.g.xxxx.mongodb.net/test?retryWrites=true&w=majority>\nUSER_DB_CONNECTION_PREFIX=<emtpy or +srv if atlas>\nUSER_DB_USERNAME=<db-username>\nUSER_DB_PASSWORD=<db-password>\n\nGLOBAL_DB_CONNECTION_STR=<mongodb-atlas-or-other-server-e.g.xxxx.mongodb.net/test?retryWrites=true&w=majority>\nGLOBAL_DB_CONNECTION_PREFIX=<emtpy or +srv if atlas>\nGLOBAL_DB_USERNAME=<db-username>\nGLOBAL_DB_PASSWORD=<db-password>\n\nDB_TIMEOUT=30\nDB_IDLE_CONN_TIMEOUT=45\nDB_MAX_POOL_SIZE=8\nDB_DB_NAME_PREFIX=\n")),(0,i.kt)("p",null,"Databases organization is described in ",(0,i.kt)("a",{parentName:"p",href:"../architecture"},"Architecture")),(0,i.kt)("p",null,(0,i.kt)("inlineCode",{parentName:"p"},"DB_DB_NAME_PREFIX")," used as the Database Prefix name, all databases manages by the service will use this value as a prefix."),(0,i.kt)("p",null,(0,i.kt)("inlineCode",{parentName:"p"},"USER_DB_*")," is needed to connect to the User Databases for all the managed instances. It should be credentials of an account with read/write rights on all databases of the managed instances."),(0,i.kt)("p",null,(0,i.kt)("inlineCode",{parentName:"p"},"GLOBAL_DB_*")," is needed to connect to the Global Databases for this prefix. (containing the ",(0,i.kt)("inlineCode",{parentName:"p"},"instances")," collection)"),(0,i.kt)("p",null,(0,i.kt)("inlineCode",{parentName:"p"},"*_CONNECTION_PREFIX")," is used for the connexion schema, if you use domain based load balancer you can use '+srv' prefix, or leave empty."),(0,i.kt)("h3",{id:"authentication-settings"},"Authentication settings"),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"TOKEN_EXPIRATION_MIN")," : Token expiration delay (in minutes)"),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"JWT_TOKEN_KEY"),": Random generated base64 encoded key, should be secret"),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"ARGON2_MEMORY"),": Memory to use for Argon2 password Hashing"),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"ARGON2_ITERATIONS"),": Number of Iterations to used"),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"ARGON2_PARALLELISM"),": Number of thread to use to compute Argon2 password hashing")),(0,i.kt)("p",null,"For details about Argon2, the golang package can give some help ",(0,i.kt)("a",{parentName:"p",href:"https://pkg.go.dev/golang.org/x/crypto/argon2"},"https://pkg.go.dev/golang.org/x/crypto/argon2")," "),(0,i.kt)("h3",{id:"service-connection"},"Service Connection"),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"USER_MANAGEMENT_LISTEN_PORT"),": Value of the port the service will listen ")),(0,i.kt)("p",null,"The User Service need to connect to other services, host:port address must be specified as"),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"ADDR_MESSAGING_SERVICE")," : Messaging Service Address"),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"ADDR_LOGGING_SERVICE"),": Logging Service Address")),(0,i.kt)("h3",{id:"parameters-for-user-services-behaviors"},"Parameters for User services behaviors"),(0,i.kt)("p",null,"Duration and Lifetimes\n|          Variable                     |  Description                                           | Unit                        |\n|-------------------------------------  |--------------------------------------------------------|-----------------------------|\n| ",(0,i.kt)("inlineCode",{parentName:"p"},"CLEAN_UP_UNVERIFIED_USERS_AFTER"),"     | Number of seconds period to cleanup unverified account | seconds                     |\n| ",(0,i.kt)("inlineCode",{parentName:"p"},"VERIFICATION_CODE_LIFETIME"),"          | Lifetime of the verification code for a new account    | seconds                     |\n| ",(0,i.kt)("inlineCode",{parentName:"p"},"INVITATION_TOKEN_LIFETIME"),"           | Token lifetime for Invitation message                  | ",(0,i.kt)("em",{parentName:"p"},"Duration (default: minutes) |\n| ",(0,i.kt)("inlineCode",{parentName:"em"},"CONTACT_VERIFICATION_TOKEN_LIFETIME")," | Token lifetime for Contact verification (email)        | "),"Duration (default: minutes) |"),(0,i.kt)("p",null,"(*) Duration handles unit (golang time.Duration 'h' for hours, 'm' for minutes, 's' for seconds), if unit is not indicated in the value the unit between parenthesis will be used."),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"NEW_USER_RATE_LIMIT"),": Maximum number of new created accounts, during the signupRateLimitWindow (5 minutes)")),(0,i.kt)("h4",{id:"weekday-assignation"},"WeekDay assignation"),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"WEEKDAY_ASSIGNATION_WEIGHTS")," : Weight of days")),(0,i.kt)("p",null,"Each account is assigned to a random day of the week to receive the Weekly reminder/newsletter. To control distribution of accounts on week days, it's possible\nto give a weight to each day. The weight will be used to determine the probability to assign a user to a given day.\nThe probability to assign a day is given by P(day) = W(day) / Sum(W(0)..W(7))\nIt's up to you to define weights, you can use any positive integer. If Weight of a day is set to 0, then the day will be excluded and no account will be assigned to this day.\nEach day is named by its 3 letter abbreviation (case insensitive) : Mon, Tue, Wed, Thu, Fri, Sat, Sun"),(0,i.kt)("p",null,"Examples:"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-bash"},"# Uniform assignation (each day has the same probability to be picked up), it's the default strategy if no value is given for this variable\nWEEKDAY_ASSIGNATION_WEIGHTS=Mon=1,Tue=1,Wed=1,Thu=1,Fri=1,Sat=1,Sun=1\n\n# Only Monday - Webnesday\nWEEKDAY_ASSIGNATION_WEIGHTS=Mon=1,Tue=1,Wed=1,Thu=0,Fri=0,Sat=0,Sun=0\n\n# Only Monday - Thursday, but Tuesday, Wednesday twice a chance to be choosen\nWEEKDAY_ASSIGNATION_WEIGHTS=Mon=1,Tue=2,Wed=2,Thu=1,Fri=0,Sat=0,Sun=0\n\n")))}m.isMDXComponent=!0}}]);