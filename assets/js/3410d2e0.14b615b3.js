"use strict";(self.webpackChunkifn_survey_handbook=self.webpackChunkifn_survey_handbook||[]).push([[616],{6334:(e,t,n)=>{n.d(t,{E:()=>R,P:()=>E});var i=n(2389),s=n(7294),a=n(5409),o=n(4866),r=n(5162),l=n(614),p=n(7546);const u=e=>new Map([["en",e]]),m=e=>({code:"en",parts:[e]}),d=e=>{const t={versionId:"1",surveyDefinition:{key:"test",items:["function"==typeof e?e():e]}};return new p.S(t,{},[],!0).getRenderedSurvey().items.at(0)},c=e=>s.createElement(a.dP,{renderItem:d(e.item),responsePrefill:e.prefill,responseChanged:e=>console.log(e),showInvalid:!1,languageCode:"en",invalidWarning:"Please check your response",showKeys:!1}),k=e=>{const t=d(e.item),n={...e,item:t},i=e.customViewer??s.createElement(c,n),a=e.json??t;return s.createElement(o.Z,null,s.createElement(r.Z,{value:"item",label:"Component"},i),s.createElement(r.Z,{value:"code",label:"Code (case-editor-tools)"},s.createElement(l.Z,{language:"jsx"},e.codeSnippet),s.createElement("span",{style:{fontSize:".8em",fontStyle:"italic"}},"To simplify code, helpers ",s.createElement("code",null,"textMap()")," and ",s.createElement("code",null,"text()")," generate respectively a Map and a Localized Text for the english text provided. See Internationalization for more details of translation.")),a?s.createElement(r.Z,{value:"json",label:"JSON"},s.createElement(l.Z,{language:"json"},JSON.stringify(a,void 0,2))):void 0)};var y=n(4453);const g={name:"singleChoice",item:()=>y.Cy.singleChoice({itemKey:"t1",parentKey:"test",questionText:u("Single Choice Example "),responseOptions:[{key:"1",content:u("My Option"),role:"option"}]}),prefill:{key:"rg",items:[{key:"scg",items:[{key:"t1"}]}]}},h={name:"dateInput",item:()=>y.Cy.dateInput({itemKey:"q1",parentKey:"test",questionText:u("A date question"),dateInputMode:"YMD"})},v=[{name:"basicText",item:()=>y.Cy.display({itemKey:"t1",parentKey:"test",content:[{role:"text",content:[m("A very intersting text")]}]})},{name:"textComponent",item:()=>y.Cy.display({itemKey:"t1",parentKey:"test",content:[{role:"text",content:[m("A stylized text using 'h2' style variant")],style:[{key:"variant",value:"h2"}]},{role:"text",content:[m("A very intersting text")]}]})}],f={"client:or":"SurveyEngine.logic.or(\n            SurveyEngine.hasResponse('intake.Q1','rg.scg.1'),\n            SurveyEngine.hasResponse('intake.Q2','rg.scg.1')\n            )\n            ","client:and":"SurveyEngine.logic.and(\n            SurveyEngine.hasResponse('intake.Q1','rg.scg.1'),\n            SurveyEngine.hasResponse('intake.Q2','rg.scg.1')\n            )\n            ","client:not":"SurveyEngine.logic.not(\n            SurveyEngine.hasResponse('intake.Q1','rg.scg.1')\n            )\n            ","client:eq":"SurveyEngine.compare.eq(\n                SurveyEngine.getResponseValueAsNum('survey.age','rg.age'),\n                20\n            )\n            ","client:lt":"SurveyEngine.compare.lt(\n            SurveyEngine.getResponseValueAsNum('survey.age','rg.age'),\n            20\n            )\n            ","client:timestampWithOffset":"SurveyEngine.timestampWithOffset({years: -1})\n            ","client:hasResponse":"// Check if the question intake.Q5 has response int the MultipleChoice (mcg) in the Response Group (rg)\n               return SurveyEngine.hasResponse('intake.Q5', 'rg.mcg')\n            ","client:getAttribute":"// Extract participantFlags from context and 'adult' element from it\n               return SurveyEngine.getters.getAttribute(\n                SurveyEngine.getters.getAttribute(SurveyEngine.getters.getContext(), 'participantFlags'),\n                'adult'\n                )\n            ","client:getAttribute2":"// Extract 'adult' from participantFlags and test if it's equal to '1' (flags value are strings)\n               return SurveyEngine.participantFlags.hasKeyAndValue(\"adult\", \"1\")\n            ","client:checkResponseValueWithRegex":"// Extract 'adult' from participantFlags and test if it's equal to '1' (flags value are strings)\n               return SurveyEngine.checkResponseValueWithRegex('intake.Q6', 'rg.1', '/[0-9]{5}/')\n            ","client:responseHasKeysAll":"// 'intake.Q1' multiplechoice group has, at least option checked with key 'cat' AND 'dog' (regardless other checked response)\n               return SurveyEngine.responseHasKeysAll('intake.Q1','rg.mcg', 'cat', 'dog')\n            ","client:responseHasOnlyKeysOtherThan":"// 'intake.Q1' multiplechoice group has NOT option checked with key 'cat' NOR 'dog' (regardless other checked response)\n              return SurveyEngine.responseHasOnlyKeysOtherThan('intake.Q1','rg.mcg', 'cat', 'dog')\n            ",dateInput:"SurveyItems.dateInput({\n    itemKey: 'q1',\n    parentKey: 'test',\n    questionText:textMap(\"A date question\"),\n    dateInputMode: 'YMD',\n  });\n  ",singleChoice:"SurveyItems.singleChoice({\n    itemKey:'t1',\n    parentKey:'test',\n    questionText: textMap(\"Single Choice Example \"),\n    responseOptions:[\n        {'key': '1', content: textMap(\"My Option\"), role: 'option' },\n    ]\n  });\n  ",textComponent:"/**\n   * The display helper creates a SurveyItem with a list of textual components\n   * \n   * Each component here has the 'text' role and can show a list of text.\n   * `style` option can be used to customize visual style of the text\n   */\n\n  return SurveyItems.display({\n    itemKey:'t1',\n    parentKey:'test',\n\n    content: [ // List of texts to show\n        \n        {\n            'role': 'text',\n            content: [  // Content is a list of LocalizedObject, each can contain a text (or a expression, resolved during item rendering using response or context)\n                text(\"A stylized text using 'h2' style variant\")\n            ],\n            style: [ // Styles can be used to customize th rendering of the text\n                {key: 'variant', value:'h2'}\n            ]\n        },\n        {\n            role: 'text',\n            content:[ \n                text(\"A very intersting text\") \n            ]\n        }\n   ]\n  });\n  ",basicText:"/**\n                 * The display helper creates a SurveyItem with a list of textual components\n                 * \n                 * Each component here has the 'text' role and can show a list of text.\n                 * `style` option can be used to customize visual style of the text\n                 */\n\n                return SurveyItems.display({\n                    itemKey:'t1',\n                    parentKey:'test',\n\n                    content: [ // List of texts to show\n                        {\n                            role: 'text',\n                            content:[ \n                                text(\"A very intersting text\") \n                            ]\n                        }                       \n                    ]\n                });\n            ",snippetName:"*   ... you code snippet\n* "};class x{constructor(){this.viewers=new Map}registerViewer(e){const t=(n=e.name,f[n]??void 0??'Code snippet not found for "'+e.name+'"');var n;this.viewers.set(e.name,{...e,codeSnippet:t})}add(e){Array.isArray(e)?e.forEach((e=>{this.registerViewer(e)})):this.registerViewer(e)}get(e){return this.viewers.get(e)}}const b=new x;b.add(g),b.add(h),b.add(v);const N=e=>{const t="function"==typeof e.expr?e.expr():e.expr,n=JSON.stringify(t,null,1);return s.createElement(o.Z,null,s.createElement(r.Z,{value:"code",label:"Code (case-editor-tools)"},s.createElement(l.Z,{language:"ts"}," ",e.codeSnippet," ")),s.createElement(r.Z,{value:"expr",label:"JSON"},s.createElement(l.Z,{language:"json"},n)))},_=[{name:"client:or",expr:()=>y.Xq.logic.or(y.Xq.hasResponse("intake.Q1","rg.scg.1"),y.Xq.hasResponse("intake.Q2","rg.scg.1"))},{name:"client:and",expr:()=>y.Xq.logic.and(y.Xq.hasResponse("intake.Q1","rg.scg.1"),y.Xq.hasResponse("intake.Q2","rg.scg.1"))},{name:"client:not",expr:()=>y.Xq.logic.not(y.Xq.hasResponse("intake.Q1","rg.scg.1"))},{name:"client:eq",expr:()=>y.Xq.compare.eq(y.Xq.getResponseValueAsNum("survey.age","rg.age"),20)},{name:"client:lt",expr:()=>y.Xq.compare.lt(y.Xq.getResponseValueAsNum("survey.age","rg.age"),20)},{name:"client:timestampWithOffset",expr:()=>y.Xq.timestampWithOffset({years:-1})},{name:"client:hasResponse",expr:()=>y.Xq.hasResponse("intake.Q5","rg.mcg")},{name:"client:getAttribute",expr:()=>y.Xq.getters.getAttribute(y.Xq.getters.getAttribute(y.Xq.getters.getContext(),"participantFlags"),"adult")},{name:"client:getAttribute2",expr:()=>y.Xq.participantFlags.hasKeyAndValue("adult","1")},{name:"client:checkResponseValueWithRegex",expr:()=>y.Xq.checkResponseValueWithRegex("intake.Q6","rg.1","/[0-9]{5}/")},{name:"client:responseHasKeysAll",expr:()=>y.Xq.responseHasKeysAll("intake.Q1","rg.mcg","cat","dog")},{name:"client:responseHasOnlyKeysOtherThan",expr:()=>y.Xq.responseHasOnlyKeysOtherThan("intake.Q1","rg.mcg","cat","dog")}],C=new x;C.add(_);const E=e=>(0,i.Z)()?(n(5577),(e=>{const t=b.get(e);return t?s.createElement(k,t):s.createElement("span",null,"Unknown component ",e)})(e.name)):"Only online",R=e=>(0,i.Z)()?(n(5577),(e=>{const t=C.get(e);return t?s.createElement(N,t):s.createElement("span",null,"Unknown component ",e)})(e.name)):"Only online"},6427:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>p,contentTitle:()=>r,default:()=>c,frontMatter:()=>o,metadata:()=>l,toc:()=>u});var i=n(7462),s=(n(7294),n(3905)),a=n(6334);const o={sidebar_label:"Expressions",sidebar_class_name:"green"},r="Survey Engine Expressions",l={unversionedId:"survey-engine/expressions",id:"survey-engine/expressions",title:"Survey Engine Expressions",description:"Expression represents an operation (possibly nested) to be evaluated to produce a value (often boolean but not always).",source:"@site/docs/survey-engine/03-expressions.mdx",sourceDirName:"survey-engine",slug:"/survey-engine/expressions",permalink:"/survey-handbook/docs/survey-engine/expressions",draft:!1,editUrl:"https://github.com/influenzanet/survey-handbook/docs/survey-engine/03-expressions.mdx",tags:[],version:"current",sidebarPosition:3,frontMatter:{sidebar_label:"Expressions",sidebar_class_name:"green"},sidebar:"tutorialSidebar",previous:{title:"Response Components",permalink:"/survey-handbook/docs/survey-engine/components/response"},next:{title:"Internationalization",permalink:"/survey-handbook/docs/survey-engine/i18n"}},p={},u=[{value:"Expression definition notation",id:"expression-definition-notation",level:2},{value:"Logical Expression",id:"logical-expression",level:2},{value:"Comparison operators",id:"comparison-operators",level:2},{value:"Utilities",id:"utilities",level:2},{value:"<code>isDefined</code>()",id:"isdefined",level:3},{value:"<code>getContext</code>()",id:"getcontext",level:3},{value:"<code>getAttribute</code>(object, name)",id:"getattributeobject-name",level:2},{value:"Responses expressions",id:"responses-expressions",level:2},{value:"<code>hasResponse</code>(item_key, rg_key):boolean",id:"hasresponseitem_key-rg_keyboolean",level:3},{value:"<code>getResponseValueAsNum</code>(item_key, rg_key):number",id:"getresponsevalueasnumitem_key-rg_keynumber",level:3},{value:"<code>getResponseValueAsStr</code>(item_key, rg_key): string",id:"getresponsevalueasstritem_key-rg_key-string",level:3},{value:"<code>responseHasKeysAny</code>(item_key, rg_key, option_key...):boolean",id:"responsehaskeysanyitem_key-rg_key-option_keyboolean",level:3},{value:"<code>responseHasKeysAll</code>(item_key, rg_key, option_key...):boolean",id:"responsehaskeysallitem_key-rg_key-option_keyboolean",level:3},{value:"<code>responseHasOnlyKeysOtherThan</code>(item_key, rg_key, option_key...):boolean",id:"responsehasonlykeysotherthanitem_key-rg_key-option_keyboolean",level:3},{value:"<code>checkResponseValueWithRegex</code>(item_key, rg_key, pattern ):boolean",id:"checkresponsevaluewithregexitem_key-rg_key-pattern-boolean",level:3},{value:"<code>countResponseItems</code>(item_key, rg_key):number",id:"countresponseitemsitem_key-rg_keynumber",level:3},{value:"Validation",id:"validation",level:2},{value:"<code>getSurveyItemValidation</code>(item_key, validation_key)",id:"getsurveyitemvalidationitem_key-validation_key",level:3},{value:"Time functions",id:"time-functions",level:2},{value:"<code>timestampWithOffset</code>(offset, refTime)",id:"timestampwithoffsetoffset-reftime",level:3},{value:"<code>getSecondsSince</code>(time):number",id:"getsecondssincetimenumber",level:3},{value:"<code>dateResponseDiffFromNow</code>(item_key, rg_key, ?unit, ?unsigned)",id:"dateresponsedifffromnowitem_key-rg_key-unit-unsigned",level:3},{value:"Low level expression",id:"low-level-expression",level:2},{value:"<code>getResponses</code>()",id:"getresponses",level:3},{value:"<code>getRenderedItems</code>()",id:"getrendereditems",level:3},{value:"<code>getArrayItemAtIndex</code>()",id:"getarrayitematindex",level:3},{value:"<code>getArrayItemByKey</code>()",id:"getarrayitembykey",level:3},{value:"<code>getObjByHierarchicalKey</code>()",id:"getobjbyhierarchicalkey",level:3},{value:"<code>getNestedObjectByKey</code>()",id:"getnestedobjectbykey",level:3},{value:"<code>findPreviousSurveyResponsesByKey</code>()",id:"findprevioussurveyresponsesbykey",level:3},{value:"<code>getLastFromSurveyResponses</code>()",id:"getlastfromsurveyresponses",level:3},{value:"<code>getPreviousResponses</code>()",id:"getpreviousresponses",level:3},{value:"<code>filterResponsesByIncludesKeys</code>()",id:"filterresponsesbyincludeskeys",level:3},{value:"<code>filterResponsesByValue</code>()",id:"filterresponsesbyvalue",level:3},{value:"<code>getLastFromSurveyItemResponses</code>()",id:"getlastfromsurveyitemresponses",level:3},{value:"<code>getResponseItem</code>()",id:"getresponseitem",level:3},{value:"<code>parseValueAsNum</code>(value):number",id:"parsevalueasnumvaluenumber",level:3}],m={toc:u},d="wrapper";function c(e){let{components:t,...n}=e;return(0,s.kt)(d,(0,i.Z)({},m,n,{components:t,mdxType:"MDXLayout"}),(0,s.kt)("h1",{id:"survey-engine-expressions"},"Survey Engine Expressions"),(0,s.kt)("p",null,(0,s.kt)("strong",{parentName:"p"},"Expression")," represents an operation (possibly nested) to be evaluated to produce a value (often boolean but not always).\nExpression provides dynamic property evaluation for the survey logic.\nThey are represented as a hierarchical data structures (an expression can contain and use the results of nested expressions as arguments)"),(0,s.kt)("p",null,"Expression is a ",(0,s.kt)("a",{parentName:"p",href:"../general/concepts"},"general concept")," used in several places of the Influenzanet Survey System"),(0,s.kt)("p",null,"An ",(0,s.kt)("strong",{parentName:"p"},"Expression")," is a simple structure that can be either:"),(0,s.kt)("ul",null,(0,s.kt)("li",{parentName:"ul"},"A typed literal value (numerical, string)"),(0,s.kt)("li",{parentName:"ul"},"A call, with a ",(0,s.kt)("inlineCode",{parentName:"li"},"name")," and a field ",(0,s.kt)("inlineCode",{parentName:"li"},"data")," set of parameters with a list of ",(0,s.kt)("inlineCode",{parentName:"li"},"Expression"))),(0,s.kt)("h2",{id:"expression-definition-notation"},"Expression definition notation"),(0,s.kt)("p",null,"To make the easier to read the expressions definition we will use a function signature representation\n",(0,s.kt)("inlineCode",{parentName:"p"},"function_name( argument1, argument2, ?optional):return_type")," equivalent of the Expression data structure:"),(0,s.kt)("pre",null,(0,s.kt)("code",{parentName:"pre",className:"language-json"},"{\n   name: 'function_name',\n   data: [\n       argument1,\n       argument2\n   ]\n}\n\n")),(0,s.kt)("p",null,(0,s.kt)("inlineCode",{parentName:"p"},"return_type")," can eventually inform about the kind of value returned by the expression\nAn argument prefixed by '?' mark is optional"),(0,s.kt)("p",null,"Several types of arguments can be provided"),(0,s.kt)("ul",null,(0,s.kt)("li",{parentName:"ul"},(0,s.kt)("inlineCode",{parentName:"li"},"item_key"),": the key path of the item of the survey (i.e. the fully qualified name of the item, from the survey root)"),(0,s.kt)("li",{parentName:"ul"},(0,s.kt)("inlineCode",{parentName:"li"},"rg_key")," : The response component path in the item from the root component (the full path of the response from the root). It always starts with the 'rg.' because the response Group component must have the 'rg' key.")),(0,s.kt)("p",null,"For example,"),(0,s.kt)("p",null,"If you have an Item named 'Q1', in a survey named 'intake' (without question group), item_key will be 'intake.Q1'\nIf this Q1 is a single choice question (only one response component), ",(0,s.kt)("inlineCode",{parentName:"p"},"rg_key")," will be 'rg.scg', for a multiple Choice 'rg.mcg'"),(0,s.kt)("p",null,"These path-like identifiers are described in the ",(0,s.kt)("a",{parentName:"p",href:"./structure"},"Survey Structure")," page."),(0,s.kt)("h2",{id:"logical-expression"},"Logical Expression"),(0,s.kt)("p",null,"Logical expressions evaluate the logical operations using boolean result of one or several expression evaluated value.\nEach expression argument is evaluated and casted as boolean "),(0,s.kt)("ul",null,(0,s.kt)("li",{parentName:"ul"},"Numerical result :  ",(0,s.kt)("inlineCode",{parentName:"li"},"true")," if > 0, and ",(0,s.kt)("inlineCode",{parentName:"li"},"false")," if <= 0"),(0,s.kt)("li",{parentName:"ul"},"String result : ",(0,s.kt)("inlineCode",{parentName:"li"},"true")," if not empty, ",(0,s.kt)("inlineCode",{parentName:"li"},"false")," if empty (=='')")),(0,s.kt)("p",null,"Several operators are available:"),(0,s.kt)("ul",null,(0,s.kt)("li",{parentName:"ul"},(0,s.kt)("inlineCode",{parentName:"li"},"and"),"(e1, e2) : AND operator (",(0,s.kt)("inlineCode",{parentName:"li"},"true")," if e1 is ",(0,s.kt)("inlineCode",{parentName:"li"},"true")," AND if e2 is ",(0,s.kt)("inlineCode",{parentName:"li"},"true"),")"),(0,s.kt)("li",{parentName:"ul"},(0,s.kt)("inlineCode",{parentName:"li"},"or"),"(e1, e2) : OR operator (",(0,s.kt)("inlineCode",{parentName:"li"},"true")," if e1 is ",(0,s.kt)("inlineCode",{parentName:"li"},"true")," OR if e2 is ",(0,s.kt)("inlineCode",{parentName:"li"},"true"),")"),(0,s.kt)("li",{parentName:"ul"},(0,s.kt)("inlineCode",{parentName:"li"},"not"),"(e1): NOT operator (",(0,s.kt)("inlineCode",{parentName:"li"},"true")," if e1 is ",(0,s.kt)("inlineCode",{parentName:"li"},"false"),", ",(0,s.kt)("inlineCode",{parentName:"li"},"false")," if e1 is ",(0,s.kt)("inlineCode",{parentName:"li"},"true"),")")),(0,s.kt)(a.E,{name:"client:not",mdxType:"ExpressionViewer"}),(0,s.kt)("h2",{id:"comparison-operators"},"Comparison operators"),(0,s.kt)("ul",null,(0,s.kt)("li",{parentName:"ul"},(0,s.kt)("inlineCode",{parentName:"li"},"eq"),"(e1, e2, ..., en) : Equal operator, true if all operators are equals, if e1 === e2 (... === en)"),(0,s.kt)("li",{parentName:"ul"},(0,s.kt)("inlineCode",{parentName:"li"},"gt"),"(e1, e2) : Greater than operator (true if e1 > e2)"),(0,s.kt)("li",{parentName:"ul"},(0,s.kt)("inlineCode",{parentName:"li"},"gte"),"(e1, e2) : Greater or equal operator (true if e1 >= e2)"),(0,s.kt)("li",{parentName:"ul"},(0,s.kt)("inlineCode",{parentName:"li"},"lt"),"(e1, e2) : Lower than operator (true if e1 < e2)"),(0,s.kt)("li",{parentName:"ul"},(0,s.kt)("inlineCode",{parentName:"li"},"lte"),"(e1, e2) : Lower or Equal operator (true if e1 <= e2)")),(0,s.kt)("p",null,"Nota: The Javascript implementation uses the '===' operator, checking for value AND type for equality."),(0,s.kt)(a.E,{name:"client:eq",mdxType:"ExpressionViewer"}),(0,s.kt)("h2",{id:"utilities"},"Utilities"),(0,s.kt)("h3",{id:"isdefined"},(0,s.kt)("inlineCode",{parentName:"h3"},"isDefined"),"()"),(0,s.kt)("p",null,"isDefined Operator test if an expression returns a defined value (i.e. the value is not ",(0,s.kt)("inlineCode",{parentName:"p"},"undefined")," nor ",(0,s.kt)("inlineCode",{parentName:"p"},"null")," for javascript engine)."),(0,s.kt)("h3",{id:"getcontext"},(0,s.kt)("inlineCode",{parentName:"h3"},"getContext"),"()"),(0,s.kt)("p",null,"getContext returns the current ",(0,s.kt)("a",{parentName:"p",href:"./context"},"Runtime Context"),", allowing to get Participant attributes "),(0,s.kt)("h2",{id:"getattributeobject-name"},(0,s.kt)("inlineCode",{parentName:"h2"},"getAttribute"),"(object, name)"),(0,s.kt)("p",null,"Extract a attribute from an object"),(0,s.kt)("p",null,"This is a low level function Common case is to extract attribute from the context, to check for a Participant flag."),(0,s.kt)(a.E,{name:"client:getAttribute",mdxType:"ExpressionViewer"}),(0,s.kt)("p",null,"Fortunately CASE Editor Tools provides some helpers to generate such complex expressions"),(0,s.kt)(a.E,{name:"client:getAttribute2",mdxType:"ExpressionViewer"}),(0,s.kt)("h2",{id:"responses-expressions"},"Responses expressions"),(0,s.kt)("p",null,"These expressions are used to get and test the current survey responses."),(0,s.kt)("h3",{id:"hasresponseitem_key-rg_keyboolean"},(0,s.kt)("inlineCode",{parentName:"h3"},"hasResponse"),"(item_key, rg_key):boolean"),(0,s.kt)("p",null,"Check if an item has a specific response object (by key)"),(0,s.kt)("ul",null,(0,s.kt)("li",{parentName:"ul"},(0,s.kt)("inlineCode",{parentName:"li"},"item_key"),": key of the item (question)"),(0,s.kt)("li",{parentName:"ul"},(0,s.kt)("inlineCode",{parentName:"li"},"rg_key")," : path of the response component from the root in the question ")),(0,s.kt)(a.E,{name:"client:hasResponse",mdxType:"ExpressionViewer"}),(0,s.kt)("h3",{id:"getresponsevalueasnumitem_key-rg_keynumber"},(0,s.kt)("inlineCode",{parentName:"h3"},"getResponseValueAsNum"),"(item_key, rg_key):number"),(0,s.kt)("p",null,"Get the response value of an Response component of an Item, and parse it as numeric value"),(0,s.kt)("ul",null,(0,s.kt)("li",{parentName:"ul"},(0,s.kt)("inlineCode",{parentName:"li"},"item_key"),": key of the item (question)"),(0,s.kt)("li",{parentName:"ul"},(0,s.kt)("inlineCode",{parentName:"li"},"rg_key")," : path of the response component in the item.")),(0,s.kt)("h3",{id:"getresponsevalueasstritem_key-rg_key-string"},(0,s.kt)("inlineCode",{parentName:"h3"},"getResponseValueAsStr"),"(item_key, rg_key): string"),(0,s.kt)("p",null,"Get the response value of an Response component of an Item as a string"),(0,s.kt)("ul",null,(0,s.kt)("li",{parentName:"ul"},(0,s.kt)("inlineCode",{parentName:"li"},"item_key"),": key of the item (question)"),(0,s.kt)("li",{parentName:"ul"},(0,s.kt)("inlineCode",{parentName:"li"},"rg_key")," : path of the response component in the item.")),(0,s.kt)("h3",{id:"responsehaskeysanyitem_key-rg_key-option_keyboolean"},(0,s.kt)("inlineCode",{parentName:"h3"},"responseHasKeysAny"),"(item_key, rg_key, option_key...):boolean"),(0,s.kt)("p",null,"Test if the response component of a item as any response key from the option_key list of value.\nThis expression is used to test if the current response of a categorical component have at least one response in a given list\noptions are identified by their key value."),(0,s.kt)("ul",null,(0,s.kt)("li",{parentName:"ul"},(0,s.kt)("inlineCode",{parentName:"li"},"item_key"),": key of the item (question)"),(0,s.kt)("li",{parentName:"ul"},(0,s.kt)("inlineCode",{parentName:"li"},"rg_key")," : path of the response component in the item."),(0,s.kt)("li",{parentName:"ul"},"option_key... : one or several key of option  ")),(0,s.kt)("h3",{id:"responsehaskeysallitem_key-rg_key-option_keyboolean"},(0,s.kt)("inlineCode",{parentName:"h3"},"responseHasKeysAll"),"(item_key, rg_key, option_key...):boolean"),(0,s.kt)("p",null,"Same as ",(0,s.kt)("inlineCode",{parentName:"p"},"responseHasKeysAny"),", but test if the current response include all the provided option key"),(0,s.kt)("p",null,"For example, if the question intake.Q1 has the current response 'cat' ",(0,s.kt)("strong",{parentName:"p"},"AND")," 'dog'"),(0,s.kt)(a.E,{name:"client:responseHasKeysAll",mdxType:"ExpressionViewer"}),(0,s.kt)("h3",{id:"responsehasonlykeysotherthanitem_key-rg_key-option_keyboolean"},(0,s.kt)("inlineCode",{parentName:"h3"},"responseHasOnlyKeysOtherThan"),"(item_key, rg_key, option_key...):boolean"),(0,s.kt)("p",null,"Same as ",(0,s.kt)("inlineCode",{parentName:"p"},"responseHasKeysAny"),", but test if the current response ",(0,s.kt)("strong",{parentName:"p"},"DOES NOT")," include any option key in the provided list"),(0,s.kt)(a.E,{name:"client:responseHasOnlyKeysOtherThan",mdxType:"ExpressionViewer"}),(0,s.kt)("h3",{id:"checkresponsevaluewithregexitem_key-rg_key-pattern-boolean"},(0,s.kt)("inlineCode",{parentName:"h3"},"checkResponseValueWithRegex"),"(item_key, rg_key, pattern ):boolean"),(0,s.kt)("p",null,"Check if the response of an item match a the given Regular Expression pattern. The pattern is using ",(0,s.kt)("a",{href:"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Guide/Regular_expressions"},"Javascript ECMAScript Regular Expression")),(0,s.kt)(a.E,{name:"client:checkResponseValueWithRegex",mdxType:"ExpressionViewer"}),(0,s.kt)("h3",{id:"countresponseitemsitem_key-rg_keynumber"},(0,s.kt)("inlineCode",{parentName:"h3"},"countResponseItems"),"(item_key, rg_key):number"),(0,s.kt)("p",null,"Count the number of responses selected in a Response component of an item."),(0,s.kt)("p",null,"If the item is not found or no response is provided yet, the expression will return -1 value."),(0,s.kt)("h2",{id:"validation"},"Validation"),(0,s.kt)("h3",{id:"getsurveyitemvalidationitem_key-validation_key"},(0,s.kt)("inlineCode",{parentName:"h3"},"getSurveyItemValidation"),"(item_key, validation_key)"),(0,s.kt)("h2",{id:"time-functions"},"Time functions"),(0,s.kt)("h3",{id:"timestampwithoffsetoffset-reftime"},(0,s.kt)("inlineCode",{parentName:"h3"},"timestampWithOffset"),"(offset, refTime)"),(0,s.kt)("ul",null,(0,s.kt)("li",{parentName:"ul"},(0,s.kt)("inlineCode",{parentName:"li"},"offset")," is the number of seconds to add to the reference time "),(0,s.kt)("li",{parentName:"ul"},(0,s.kt)("inlineCode",{parentName:"li"},"refTime")," is the reference time (if not provided the current time will be used)")),(0,s.kt)("p",null,"Both are evaluated to number but they can be expressions."),(0,s.kt)(a.E,{name:"client:timestampWithOffset",mdxType:"ExpressionViewer"}),(0,s.kt)("h3",{id:"getsecondssincetimenumber"},(0,s.kt)("inlineCode",{parentName:"h3"},"getSecondsSince"),"(time):number"),(0,s.kt)("p",null,"Returns the number of seconds from the given time and the current time."),(0,s.kt)("p",null,"time must be evaluated to a Unix timestamp (number of seconds since 1970-01-01), it can be an expression returning the timestamp (Date and time response component returns response as timestamp value)"),(0,s.kt)("h3",{id:"dateresponsedifffromnowitem_key-rg_key-unit-unsigned"},(0,s.kt)("inlineCode",{parentName:"h3"},"dateResponseDiffFromNow"),"(item_key, rg_key, ?unit, ?unsigned)"),(0,s.kt)("p",null,"Evaluate time difference from now using response of an item"),(0,s.kt)("ul",null,(0,s.kt)("li",{parentName:"ul"},(0,s.kt)("inlineCode",{parentName:"li"},"item_key"),": key of the item (question)"),(0,s.kt)("li",{parentName:"ul"},(0,s.kt)("inlineCode",{parentName:"li"},"rg_key")," : path of the response component from the root in the question (always starts with 'rg.' representing the Response Group Component)")),(0,s.kt)("h2",{id:"low-level-expression"},"Low level expression"),(0,s.kt)("p",null,"Most of the time you wont need these expression, but in some case it's necessary to use them."),(0,s.kt)("h3",{id:"getresponses"},(0,s.kt)("inlineCode",{parentName:"h3"},"getResponses"),"()"),(0,s.kt)("h3",{id:"getrendereditems"},(0,s.kt)("inlineCode",{parentName:"h3"},"getRenderedItems"),"()"),(0,s.kt)("h3",{id:"getarrayitematindex"},(0,s.kt)("inlineCode",{parentName:"h3"},"getArrayItemAtIndex"),"()"),(0,s.kt)("h3",{id:"getarrayitembykey"},(0,s.kt)("inlineCode",{parentName:"h3"},"getArrayItemByKey"),"()"),(0,s.kt)("h3",{id:"getobjbyhierarchicalkey"},(0,s.kt)("inlineCode",{parentName:"h3"},"getObjByHierarchicalKey"),"()"),(0,s.kt)("h3",{id:"getnestedobjectbykey"},(0,s.kt)("inlineCode",{parentName:"h3"},"getNestedObjectByKey"),"()"),(0,s.kt)("h3",{id:"findprevioussurveyresponsesbykey"},(0,s.kt)("inlineCode",{parentName:"h3"},"findPreviousSurveyResponsesByKey"),"()"),(0,s.kt)("h3",{id:"getlastfromsurveyresponses"},(0,s.kt)("inlineCode",{parentName:"h3"},"getLastFromSurveyResponses"),"()"),(0,s.kt)("h3",{id:"getpreviousresponses"},(0,s.kt)("inlineCode",{parentName:"h3"},"getPreviousResponses"),"()"),(0,s.kt)("h3",{id:"filterresponsesbyincludeskeys"},(0,s.kt)("inlineCode",{parentName:"h3"},"filterResponsesByIncludesKeys"),"()"),(0,s.kt)("h3",{id:"filterresponsesbyvalue"},(0,s.kt)("inlineCode",{parentName:"h3"},"filterResponsesByValue"),"()"),(0,s.kt)("h3",{id:"getlastfromsurveyitemresponses"},(0,s.kt)("inlineCode",{parentName:"h3"},"getLastFromSurveyItemResponses"),"()"),(0,s.kt)("h3",{id:"getresponseitem"},(0,s.kt)("inlineCode",{parentName:"h3"},"getResponseItem"),"()"),(0,s.kt)("h3",{id:"parsevalueasnumvaluenumber"},(0,s.kt)("inlineCode",{parentName:"h3"},"parseValueAsNum"),"(value):number"),(0,s.kt)("p",null,"Evaluate the argument value (can be an expression), and parse it to number"))}c.isMDXComponent=!0}}]);