"use strict";(self.webpackChunkifn_survey_handbook=self.webpackChunkifn_survey_handbook||[]).push([[536],{9411:(e,t,n)=>{n.d(t,{P:()=>k});var o=n(2389),s=n(7294),i=n(5409),r=n(4866),a=n(5162),l=n(614),p=n(7546);const c=e=>new Map([["en",e]]),m=e=>({code:"en",parts:[e]}),u=e=>{const t={versionId:"1",surveyDefinition:{key:"test",items:["function"==typeof e?e():e]}};return new p.S(t,{},[],!0).getRenderedSurvey().items.at(0)},d=e=>s.createElement(i.dP,{renderItem:u(e.item),responsePrefill:e.prefill,responseChanged:e=>console.log(e),showInvalid:!1,languageCode:"en",invalidWarning:"Please check your response",showKeys:!1}),y=e=>{const t=u(e.item),n={...e,item:t},o=e.customViewer??s.createElement(d,n),i=e.json??t;return s.createElement(r.Z,null,s.createElement(a.Z,{value:"item",label:"Component"},o),s.createElement(a.Z,{value:"code",label:"Code (case-editor-tools)"},s.createElement(l.Z,{language:"jsx"},e.codeSnippet),s.createElement("span",{style:{fontSize:".8em",fontStyle:"italic"}},"To simplify code, helpers ",s.createElement("code",null,"textMap()")," and ",s.createElement("code",null,"text()")," generate respectively a Map and a Localized Text for the english text provided. See Internationalization for more details of translation.")),i?s.createElement(a.Z,{value:"json",label:"JSON"},s.createElement(l.Z,{language:"json"},JSON.stringify(i,void 0,2))):void 0)};var x=n(4453);const v={name:"singleChoice",item:()=>x.Cy.singleChoice({itemKey:"t1",parentKey:"test",questionText:c("Single Choice Example "),responseOptions:[{key:"1",content:c("My Option"),role:"option"}]}),prefill:{key:"rg",items:[{key:"scg",items:[{key:"t1"}]}]}},h={name:"dateInput",item:()=>x.Cy.dateInput({itemKey:"q1",parentKey:"test",questionText:c("A date question"),dateInputMode:"YMD"})},f=[{name:"basicText",code:"basic",item:()=>x.Cy.display({itemKey:"t1",parentKey:"test",content:[{role:"text",content:[m("A very intersting text")]}]})},{name:"textComponent",item:()=>x.Cy.display({itemKey:"t1",parentKey:"test",content:[{role:"text",content:[m("A stylized text using 'h2' style variant")],style:[{key:"variant",value:"h2"}]},{role:"text",content:[m("A very intersting text")]}]})}],g=new Map,I=(e,t)=>{const n=function(e,t){const n=t?":"+t:"",o=".*\\/\\/\\s*--code"+n+"\\s*--\\s(\\s*return\\s*)?(.*)\\/\\/\\s*--end"+n+"\\s*--.*",s=new RegExp(o,"gms");return console.log(o),e.replace(s,"$2")}(t,e.code);g.set(e.name,{...e,codeSnippet:n})},C=(e,t)=>{Array.isArray(e)?e.forEach((e=>{I(e,t)})):I(e,t)};C(v,"import { SurveyItems } from \"case-editor-tools/surveys\";\nimport { textMap, DefaultItemViewer, ViewerDefinition } from \"./utils\";\nimport React from \"react\";\n\nexport const SingleChoiceItem = () => {\n  // --code--\n  return SurveyItems.singleChoice({\n    itemKey:'t1',\n    parentKey:'test',\n    questionText: textMap(\"Single Choice Example \"),\n    responseOptions:[\n        {'key': '1', content: textMap(\"My Option\"), role: 'option' },\n    ]\n  });\n  // --end--\n}\n\nexport const SingleChoiceViewer = {\n    \n}\n \nconst def : ViewerDefinition = {\n  name: 'singleChoice',\n  item: SingleChoiceItem,\n  prefill:{\n            key: 'rg',\n            items: [\n              { key: 'scg', items: [{ key: 't1' }] }\n            ]\n  }\n}\n\nexport default def;"),C(h,"import React from \"react\";\n//import { en } from 'date-fns/locale';\nimport { SurveyItems } from \"case-editor-tools/surveys\";\nimport { ViewerDefinition, textMap } from \"./utils\";\n\nexport const DateInput = () => {\n  // --code--\n  return SurveyItems.dateInput({\n    itemKey: 'q1',\n    parentKey: 'test',\n    questionText:textMap(\"A date question\"),\n    dateInputMode: 'YMD',\n  });\n  //--end--\n}\n\nexport default {\n  name: 'dateInput',\n  item: DateInput\n} as ViewerDefinition;\n\n"),C(f,"import { SurveyItems } from \"case-editor-tools/surveys\";\nimport { textMap, DefaultItemViewer, text, ViewerDefinition } from \"./utils\";\nimport React from \"react\";\n\nexport const TextItem = () => {\n  // --code--\n\n  /**\n   * The display helper creates a SurveyItem with a list of textual components\n   * \n   * Each component here has the 'text' role and can show a list of text.\n   * `style` option can be used to customize visual style of the text\n   */\n\n  return SurveyItems.display({\n    itemKey:'t1',\n    parentKey:'test',\n\n    content: [ // List of texts to show\n        \n        {\n            'role': 'text',\n            content: [  // Content is a list of LocalizedObject, each can contain a text (or a expression, resolved during item rendering using response or context)\n                text(\"A stylized text using 'h2' style variant\")\n            ],\n            style: [ // Styles can be used to customize th rendering of the text\n                {key: 'variant', value:'h2'}\n            ]\n        },\n        {\n            role: 'text',\n            content:[ \n                text(\"A very intersting text\") \n            ]\n        }\n   ]\n  });\n  // --end--\n}\n \nexport default [\n    {\n        name:'basicText',\n        code:'basic',\n        item: ()=> {\n             // --code:basic--\n\n                /**\n                 * The display helper creates a SurveyItem with a list of textual components\n                 * \n                 * Each component here has the 'text' role and can show a list of text.\n                 * `style` option can be used to customize visual style of the text\n                 */\n\n                return SurveyItems.display({\n                    itemKey:'t1',\n                    parentKey:'test',\n\n                    content: [ // List of texts to show\n                        {\n                            role: 'text',\n                            content:[ \n                                text(\"A very intersting text\") \n                            ]\n                        }                       \n                    ]\n                });\n            // --end:basic--\n        }\n        \n    },\n    {\n        name:'textComponent',\n        item: TextItem\n    }\n] as ViewerDefinition[]\n");const k=e=>(0,o.Z)()?(n(5577),(e=>{const t=g.get(e);return t?s.createElement(y,t):s.createElement("span",null,"Unknown component ",e)})(e.name)):"Only online"},9739:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>p,contentTitle:()=>a,default:()=>d,frontMatter:()=>r,metadata:()=>l,toc:()=>c});var o=n(7462),s=(n(7294),n(3905)),i=n(9411);const r={sidebar_label:"Response Components"},a="Survey Item Response Components",l={unversionedId:"survey-engine/components/response",id:"survey-engine/components/response",title:"Survey Item Response Components",description:"Date Input",source:"@site/docs/survey-engine/components/03-response.mdx",sourceDirName:"survey-engine/components",slug:"/survey-engine/components/response",permalink:"/survey-handbook/docs/survey-engine/components/response",draft:!1,editUrl:"https://github.com/influenzanet/survey-handbook/docs/survey-engine/components/03-response.mdx",tags:[],version:"current",sidebarPosition:3,frontMatter:{sidebar_label:"Response Components"},sidebar:"tutorialSidebar",previous:{title:"Display Components",permalink:"/survey-handbook/docs/survey-engine/components/display"},next:{title:"Expressions",permalink:"/survey-handbook/docs/survey-engine/expressions"}},p={},c=[{value:"Date Input",id:"date-input",level:3},{value:"Single Choice Group",id:"single-choice-group",level:3}],m={toc:c},u="wrapper";function d(e){let{components:t,...n}=e;return(0,s.kt)(u,(0,o.Z)({},m,n,{components:t,mdxType:"MDXLayout"}),(0,s.kt)("h1",{id:"survey-item-response-components"},"Survey Item Response Components"),(0,s.kt)("h3",{id:"date-input"},"Date Input"),(0,s.kt)(i.P,{name:"dateInput",mdxType:"SurveyComponent"}),(0,s.kt)("h3",{id:"single-choice-group"},"Single Choice Group"),(0,s.kt)(i.P,{name:"singleChoice",mdxType:"SurveyComponent"}))}d.isMDXComponent=!0}}]);