"use strict";(self.webpackChunkifn_survey_handbook=self.webpackChunkifn_survey_handbook||[]).push([[221],{3905:(e,t,n)=>{n.d(t,{Zo:()=>u,kt:()=>v});var a=n(7294);function r(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function i(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);t&&(a=a.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,a)}return n}function s(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?i(Object(n),!0).forEach((function(t){r(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):i(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function c(e,t){if(null==e)return{};var n,a,r=function(e,t){if(null==e)return{};var n,a,r={},i=Object.keys(e);for(a=0;a<i.length;a++)n=i[a],t.indexOf(n)>=0||(r[n]=e[n]);return r}(e,t);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(e);for(a=0;a<i.length;a++)n=i[a],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(r[n]=e[n])}return r}var l=a.createContext({}),o=function(e){var t=a.useContext(l),n=t;return e&&(n="function"==typeof e?e(t):s(s({},t),e)),n},u=function(e){var t=o(e.components);return a.createElement(l.Provider,{value:t},e.children)},d="mdxType",p={inlineCode:"code",wrapper:function(e){var t=e.children;return a.createElement(a.Fragment,{},t)}},m=a.forwardRef((function(e,t){var n=e.components,r=e.mdxType,i=e.originalType,l=e.parentName,u=c(e,["components","mdxType","originalType","parentName"]),d=o(n),m=r,v=d["".concat(l,".").concat(m)]||d[m]||p[m]||i;return n?a.createElement(v,s(s({ref:t},u),{},{components:n})):a.createElement(v,s({ref:t},u))}));function v(e,t){var n=arguments,r=t&&t.mdxType;if("string"==typeof e||r){var i=n.length,s=new Array(i);s[0]=m;var c={};for(var l in t)hasOwnProperty.call(t,l)&&(c[l]=t[l]);c.originalType=e,c[d]="string"==typeof e?e:r,s[1]=c;for(var o=2;o<i;o++)s[o]=n[o];return a.createElement.apply(null,s)}return a.createElement.apply(null,n)}m.displayName="MDXCreateElement"},1544:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>l,contentTitle:()=>s,default:()=>p,frontMatter:()=>i,metadata:()=>c,toc:()=>o});var a=n(7462),r=(n(7294),n(3905));const i={title:"Architecture"},s="Architecture Overview",c={unversionedId:"system/architecture",id:"system/architecture",title:"Architecture",description:"Backend",source:"@site/docs/system/01-architecture.md",sourceDirName:"system",slug:"/system/architecture",permalink:"/docs/system/architecture",draft:!1,editUrl:"https://github.com/influenzanet/survey-handbook/docs/system/01-architecture.md",tags:[],version:"current",sidebarPosition:1,frontMatter:{title:"Architecture"},sidebar:"systemSidebar",previous:{title:"Influenzanet System Documentation",permalink:"/docs/system/index"},next:{title:"Installation",permalink:"/docs/system/installation"}},l={},o=[{value:"Backend",id:"backend",level:2},{value:"Multi tenant organization",id:"multi-tenant-organization",level:2},{value:"Technical choices:",id:"technical-choices",level:2},{value:"Database",id:"database",level:3},{value:"Microservices",id:"microservices",level:3},{value:"Clients",id:"clients",level:3}],u={toc:o},d="wrapper";function p(e){let{components:t,...n}=e;return(0,r.kt)(d,(0,a.Z)({},u,n,{components:t,mdxType:"MDXLayout"}),(0,r.kt)("h1",{id:"architecture-overview"},"Architecture Overview"),(0,r.kt)("mermaid",{value:"flowchart TB\n\n    apiGateway[Api Gateway]\n    webClient[Web Client]\n    adminClient[Admin Client]\n\n    subgraph backend\n        userService[User Management Service]\n        studyService[Study Service]\n        loggingService[Logging Service]\n        subgraph messaging\n            messagingService[Messaging Service]\n            messageScheduler[Message Scheduler]\n            emailClientService[Email client]\n        end\n    end\n\n    subgraph db[MongoDB databases]\n        userDB[User]\n        studyDB[Study]\n        globalDB[Global]\n        messageDB[Message]\n    end\n\n    smtpServer[External smtp server]\n\n    webClient<--\x3eapiGateway\n    adminClient<--\x3eapiGateway\n    \n    apiGateway <-- gRPC --\x3e userService\n    apiGateway <-- gRPC --\x3e studyService\n\n    \n    %% Svc to svc\n    userService <-- gRPC --\x3e messagingService\n    studyService <-- gRPC --\x3emessagingService\n\n    %% Svc to db \n    userService <-.-> userDB\n    studyService <-.-> studyDB\n    userService <-.-> globalDB\n    studyService <-.-> globalDB\n\n    messagingService<-.->messageDB\n    messageScheduler<-.->messageDB\n    emailClientService<-.->messageDB\n    loggingService<-.->userDB\n\n    emailClientService --\x3e smtpServer\n"}),(0,r.kt)("h2",{id:"backend"},"Backend"),(0,r.kt)("p",null,"Influenzanet platform's backend is based on microservice oriented architecture. Each service manage its own data domain."),(0,r.kt)("p",null,"Base services are (code are in ",(0,r.kt)("a",{parentName:"p",href:"./repositories"},"repositories page"),"):"),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},"User Management Service : handles users account and authentication "),(0,r.kt)("li",{parentName:"ul"},"Study Service : handles study (survey, response, participants)"),(0,r.kt)("li",{parentName:"ul"},"Messaging Service : manages messages (email)")),(0,r.kt)("p",null,"Each service use its own MongoDB database. A special database name globalDB is shared by some services to manage common entities (instances)"),(0,r.kt)("h2",{id:"multi-tenant-organization"},"Multi tenant organization"),(0,r.kt)("p",null,"Databases are organized to allow multi-tenant organization."),(0,r.kt)("p",null,"2 levels are used:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre"},"- Static : A service is connected to a fixed database namespace, using a database `prefix`\n- Dynamic : A Service can manage several `instances`, each instance is using its own MongoDB database. Determined for each request to the service (instance Id is provided with the request).\n")),(0,r.kt)("p",null,"globalDB contains an ",(0,r.kt)("inlineCode",{parentName:"p"},"instances")," collection determining the known instances "),(0,r.kt)("p",null,"Each database name is constructed using the following schema:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre"},"[dbPrefix][instance]_[dbName] \n")),(0,r.kt)("p",null,"For example, for the namespace ",(0,r.kt)("inlineCode",{parentName:"p"},"prod")," (using prefix \"prod_\" ), instance 'italy',  userDB will be ",(0,r.kt)("inlineCode",{parentName:"p"},"prod_italy_users")),(0,r.kt)("h2",{id:"technical-choices"},"Technical choices:"),(0,r.kt)("h3",{id:"database"},"Database"),(0,r.kt)("p",null,"The Influenzanet backend is using MongoDB to store data."),(0,r.kt)("p",null,"Influenzanet surveillance data analysis are done using PostgreSQL database"),(0,r.kt)("h3",{id:"microservices"},"Microservices"),(0,r.kt)("p",null,"Microservices are written in ",(0,r.kt)("a",{parentName:"p",href:"https://go.dev/"},"golang")),(0,r.kt)("h3",{id:"clients"},"Clients"),(0,r.kt)("p",null,"Web client are built using ",(0,r.kt)("a",{parentName:"p",href:"https://react.dev/"},"React")," with typescript flavor."),(0,r.kt)("p",null,"Administration tools (command line) are using Python"))}p.isMDXComponent=!0}}]);