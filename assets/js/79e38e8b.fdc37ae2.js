"use strict";(self.webpackChunkifn_survey_handbook=self.webpackChunkifn_survey_handbook||[]).push([[293],{3373:(e,t,n)=>{n.d(t,{E:()=>R,P:()=>I});var o=n(2389),i=n(7294),a=n(5409),s=n(4866),r=n(5162),l=n(614),p=n(7546);const u=e=>new Map([["en",e]]),m=e=>({code:"en",parts:[e]}),y=(e,t)=>({versionId:"1",surveyDefinition:{key:"test"+(t??""),items:["function"==typeof e?e():e]}}),c=e=>{const[t,n]=(0,i.useState)(void 0);return i.createElement("div",{className:"survey-viewer-"+e.id},i.createElement(a.oP,{survey:y(e.item,e.id),languageCode:"en",backBtnText:"Back",nextBtnText:"Next",onSubmit:e=>n(e[0]),submitBtnText:"Submit",invalidResponseText:"Please check your response",showKeys:!1,hideBackButton:!0}),t?i.createElement("div",{className:"card bg-default"},i.createElement("div",{className:"card-body p-1"},i.createElement("pre",{className:"p-0 m-0"},JSON.stringify(t,void 0,1)))):"")},d=e=>{const t=(e=>{"function"==typeof e&&e();const t=y(e);return new p.S(t,{},[],!0).getRenderedSurvey().items.at(0)})(e.item),n={...e,item:e.item},o=e.customViewer??i.createElement(c,n),a=e.json??t;return i.createElement(s.Z,null,i.createElement(r.Z,{value:"item",label:"Component"},o),i.createElement(r.Z,{value:"code",label:"Code (case-editor-tools)"},i.createElement(l.Z,{language:"jsx"},e.codeSnippet),i.createElement("span",{style:{fontSize:".8em",fontStyle:"italic"}},"To simplify code, helpers ",i.createElement("code",null,"textMap()")," and ",i.createElement("code",null,"text()")," generate respectively a Map and a Localized Text for the english text provided. See Internationalization for more details of translation.")),a?i.createElement(r.Z,{value:"json",label:"JSON"},i.createElement(l.Z,{language:"json"},JSON.stringify(a,void 0,2))):void 0)},k={"client:or":"SurveyEngine.logic.or(\n            SurveyEngine.hasResponse('intake.Q1','rg.scg.1'),\n            SurveyEngine.hasResponse('intake.Q2','rg.scg.1')\n            )\n            ","client:and":"SurveyEngine.logic.and(\n            SurveyEngine.hasResponse('intake.Q1','rg.scg.1'),\n            SurveyEngine.hasResponse('intake.Q2','rg.scg.1')\n            )\n            ","client:not":"SurveyEngine.logic.not(\n            SurveyEngine.hasResponse('intake.Q1','rg.scg.1')\n            )\n            ","client:eq":"SurveyEngine.compare.eq(\n                SurveyEngine.getResponseValueAsNum('survey.age','rg.age'),\n                20\n            )\n            ","client:lt":"SurveyEngine.compare.lt(\n            SurveyEngine.getResponseValueAsNum('survey.age','rg.age'),\n            20\n            )\n            ","client:timestampWithOffset":"SurveyEngine.timestampWithOffset({years: -1})\n            ","client:hasResponse":"// Check if the question intake.Q5 has response int the MultipleChoice (mcg) in the Response Group (rg)\n               return SurveyEngine.hasResponse('intake.Q5', 'rg.mcg')\n            ","client:getAttribute":"// Extract participantFlags from context and 'adult' element from it\n               return SurveyEngine.getters.getAttribute(\n                SurveyEngine.getters.getAttribute(SurveyEngine.getters.getContext(), 'participantFlags'),\n                'adult'\n                )\n            ","client:getAttribute2":"// Extract 'adult' from participantFlags and test if it's equal to '1' (flags value are strings)\n               return SurveyEngine.participantFlags.hasKeyAndValue(\"adult\", \"1\")\n            ","client:checkResponseValueWithRegex":"// Extract 'adult' from participantFlags and test if it's equal to '1' (flags value are strings)\n               return SurveyEngine.checkResponseValueWithRegex('intake.Q6', 'rg.1', '/[0-9]{5}/')\n            ","client:responseHasKeysAll":"// 'intake.Q1' multiplechoice group has, at least option checked with key 'cat' AND 'dog' (regardless other checked response)\n               return SurveyEngine.responseHasKeysAll('intake.Q1','rg.mcg', 'cat', 'dog')\n            ","client:responseHasOnlyKeysOtherThan":"// 'intake.Q1' multiplechoice group has NOT option checked with key 'cat' NOR 'dog' (regardless other checked response)\n              return SurveyEngine.responseHasOnlyKeysOtherThan('intake.Q1','rg.mcg', 'cat', 'dog')\n            ","i18n:dateResponseDiffFromNow":'SurveyEngine.dateResponseDiffFromNow("survey.age","rg.date", "years", true);\n            ',singleChoice:"SurveyItems.singleChoice({\n    itemKey:'t1',\n    parentKey:'test',\n    questionText: textMap(\"Single Choice Example \"),\n    responseOptions:[\n        {'key': '1', content: textMap(\"My Option\"), role: 'option' },\n    ]\n  });\n  ",DropDownItem:"SurveyItems.dropDown({\n    itemKey:'t1',\n    parentKey:'test',\n    questionText: textMap(\"DropDown Example \"),\n    responseOptions:[\n        {'key': '1', content: textMap(\"Option One\"), role: 'option' },\n        {'key': '2', content: textMap(\"Option Two\"), role: 'option' },\n        {'key': '3', content: textMap(\"Option Three\"), role: 'option' },\n    ]\n  });\n  ",MultipleChoice:"SurveyItems.multipleChoice({\n    itemKey:'t2',\n    parentKey:'test',\n    questionText: textMap(\"Multiple Choice Example \"),\n    responseOptions:[\n        {'key': '1', content: textMap(\"Choice 1\"), role: 'option' },\n        {'key': '2', content: textMap(\"Choice 2\"), role: 'option' },\n        {'key': '3', content: textMap(\"Choice 3\"), role: 'option' },\n    ]\n  });\n  ",MultipleChoiceExclusive:"const exclusive1 = SurveyEngine.multipleChoice.any('test.t3', \"1\");\n  const exclusive3 = SurveyEngine.multipleChoice.any('test.t3', \"3\");\n\n  return SurveyItems.multipleChoice({\n    itemKey:'t3',\n    parentKey:'test',\n    questionText: textMap(\"Multiple choice with exclusive option\"),\n    responseOptions:[\n      {'key': '1', content: textMap(\"Choice 1\"), role: 'option', disabled: exclusive3 },\n      {'key': '2', content: textMap(\"Choice 2\"), role: 'option' },\n      {'key': '3', content: textMap(\"Choice 3\"), role: 'option', disabled: exclusive1 },\n    ]\n  });\n  ",MultipleChoiceOpenItem:"SurveyItems.multipleChoice({\n    itemKey:'t2',\n    parentKey:'test',\n    questionText: textMap(\"Multiple Choice Example \"),\n    responseOptions:[\n        {'key': '1', content: textMap(\"Choice 1\"), role: 'option' },\n        {'key': '2', content: textMap(\"Choice 2\"), role: 'option' },\n        {\n          'key': '3', \n          content: textMap(\"Choice 3\"), \n          role: 'input',\n        },\n    ]\n  });\n  ",MultipleChoiceComplexOption:'SurveyItems.multipleChoice({\n    itemKey:\'t2\',\n    parentKey:\'test\',\n    questionText: textMap("Multiple Choice Example "),\n    responseOptions:[\n        {\'key\': \'1\', role: \'option\',\n          items: [\n            {"key": "1", role:"text", content: textMap("Main text of the option")},\n            {"key":"2",  role:"text", content: textMap("Small text"), style: [{key:"className", value:"d-block fs-6"}]}\n          ]\n        },\n        {\'key\': \'2\', content: textMap("Choice 2"), role: \'option\' },\n        {\n          \'key\': \'3\', \n          role: \'option\',\n          items: [\n            {"key":"1", role:"text", content: textMap("text in bold"), style: [{key:"className", value:"fw-bold"}]},\n            {"key":"2", role:"text", content: textMap(" text in red"), style: [{key:"className", value:"text-danger"}]}\n          ]\n        },\n    ]\n  });\n  ',ClozeInput:"SurveyItems.clozeQuestion({\n    itemKey:'t1',\n    parentKey:'test',\n    questionText: textMap(\"Cloze question\"),\n    items:[\n        {key: '0', role:'text', content: textMap(\"We can put a text and ask for an number\")},\n        {key: '1', role:'numberInput'},\n        {key: '2', role:'text', content: textMap(\"Then we can continue with another text and ask for a date\")},\n        {key: '3', role:'dateInput'},\n        {key: '4', role:'text', content: textMap(\"or a year-month\")},\n        {key: '5', role:'dateInput', optionProps: {'dateInputMode':'YM'}},\n        {key: '6', role:'text', content: textMap(\"or a drop down\")},\n        {key: '7', role:'dropDownGroup', items: [ \n            {'key': '1', content: textMap(\"Option 1\"), role:'option'},\n            {'key': '2', content: textMap(\"Option 1\"), role: 'option'},\n            \n        ]},\n        \n\n    ]\n  });\n  ",dateInput:"SurveyItems.dateInput({\n    itemKey: 'q1',\n    parentKey: 'test',\n    questionText:textMap(\"A date question\"),\n    dateInputMode: 'YMD',\n  });\n  ",YearMonthInput:"SurveyItems.dateInput({\n    itemKey: 'q2',\n    parentKey: 'test',\n    questionText:textMap(\"A year month question\"),\n    dateInputMode: 'YM',\n  });\n  ",YearInput:"SurveyItems.dateInput({\n    itemKey: 'q2',\n    parentKey: 'test',\n    questionText:textMap(\"A year question\"),\n    dateInputMode: 'Y',\n  });\n  ",MatrixDropDownItem:"SurveyItems.responsiveMatrix({\n    itemKey:'t2',\n    parentKey:'test',\n    questionText: textMap(\"Matrix with drop down\"),\n    breakpoint: 'xl',\n    responseType: \"dropdown\",\n    rows:   [  \n        {'key': 'r1', label: textMap(\"Row 1\"), role: 'row' },\n        {'key': 'r2', label: textMap(\"Row 2\"), role: 'row' },\n        {'key': 'r3', label: textMap(\"Row 3\"), role: 'row' },\n    ],\n    columns: [\n        {'key': 'c1', label: textMap(\"Col 1\")},\n        {'key': 'c2', label: textMap(\"Col 2\")},   \n    ],\n    dropdownConfig: {\n        unselectedLabeL: textMap(\"Choose\"),\n        options: [\n            {'key': '1', label: textMap(\"Choice 1\")},\n            {'key': '2', label: textMap(\"Choice 2\")},  \n        ]\n    }\n  });\n  ",MatrixDropDownCategoryItem:"SurveyItems.responsiveMatrix({\n      itemKey:'t2',\n      parentKey:'test',\n      questionText: textMap(\"Matrix with drop down\"),\n      responseType: \"dropdown\",\n      breakpoint: 'xl',\n      rows:   [  \n          {'key': 'rc3', label: textMap(\"A category\"), role: 'category' },\n          {'key': 'r1', label: textMap(\"Row 1\"), role: 'row' },\n          {'key': 'r2', label: textMap(\"Row 2\"), role: 'row' },\n          {'key': 'rc2', label: textMap(\"A second category\"), role: 'category' },\n          {'key': 'r3', label: textMap(\"Row 3\"), role: 'row' },\n          {'key': 'r4', label: textMap(\"Row 4\"), role: 'row' },\n      ],\n      columns: [\n          {'key': 'c1', label: textMap(\"Col 1\")},\n          {'key': 'c2', label: textMap(\"Col 2\")},   \n      ],\n      dropdownConfig: {\n          unselectedLabeL: textMap(\"Choose\"),\n          options: [\n              {'key': '1', label: textMap(\"Choice 1\")},\n              {'key': '2', label: textMap(\"Choice 2\")},  \n          ]\n      }\n    });\n    ",MatrixInputItem:"SurveyItems.responsiveMatrix({\n      itemKey:'t2',\n      parentKey:'test',\n      questionText: textMap(\"Matrix with drop down\"),\n      breakpoint: 'xl',\n      responseType: \"numberInput\",\n      rows:   [  \n          {'key': 'r1', label: textMap(\"Row 1\"), role: 'row' },\n          {'key': 'r2', label: textMap(\"Row 2\"), role: 'row' },\n          {'key': 'r3', label: textMap(\"Row 3\"), role: 'row' },\n      ],\n      columns: [\n          {'key': 'c1', label: textMap(\"Col 1\")},\n          {'key': 'c2', label: textMap(\"Col 2\")},   \n      ]\n    });\n    ",textComponent:"/**\n   * The display helper creates a SurveyItem with a list of textual components\n   * \n   * Each component here has the 'text' role and can show a list of text.\n   * `style` option can be used to customize visual style of the text\n   */\n\n  return SurveyItems.display({\n    itemKey:'t1',\n    parentKey:'test',\n\n    content: [ // List of texts to show\n        \n        {\n            'role': 'text',\n            content: [  // Content is a list of LocalizedObject, each can contain a text (or a expression, resolved during item rendering using response or context)\n                text(\"A stylized text using 'h2' style variant\")\n            ],\n            style: [ // Styles can be used to customize th rendering of the text\n                {key: 'variant', value:'h2'}\n            ]\n        },\n        {\n            role: 'text',\n            content:[ \n                text(\"A very intersting text\") \n            ]\n        }\n   ]\n  });\n  ",basicText:"/**\n                 * The display helper creates a SurveyItem with a list of textual components\n                 * \n                 * Each component here has the 'text' role and can show a list of text.\n                 * `style` option can be used to customize visual style of the text\n                 */\n\n                return SurveyItems.display({\n                    itemKey:'t1',\n                    parentKey:'test',\n\n                    content: [ // List of texts to show\n                        {\n                            role: 'text',\n                            content:[ \n                                text(\"A very intersting text\") \n                            ]\n                        }                       \n                    ]\n                });\n            ",TextInput:"SurveyItems.textInput({\n    itemKey:'t1',\n    parentKey:'test',\n    questionText: textMap(\"Simple text input\"),\n    placeholderText: textMap(\"Placeholder text\")\n  });\n  ",NumberInput:"SurveyItems.numericInput({\n    itemKey:'t2',\n    parentKey:'test',\n    inputLabel: textMap(\"Input label\"),\n    questionText: textMap(\"Number input question \"),\n    componentProperties: {\n      min: 0,\n      max: 120\n    }\n  });\n  ",MultilineTextInput:"SurveyItems.multilineTextInput({\n    itemKey:'t2',\n    parentKey:'test',\n    inputLabelText: textMap(\"My Input label \"),\n    questionText: textMap(\"Question with Multiline Text Input\"),\n  });\n  ",snippetName:"*   ... you code snippet\n* "};class h{constructor(){this.viewers=new Map,this.count=0}registerViewer(e){const t=(n=e.name,k[n]??void 0??'Code snippet not found for "'+e.name+'"');var n;++this.count,this.viewers.set(e.name,{...e,codeSnippet:t,id:this.count})}add(e){Array.isArray(e)?e.forEach((e=>{this.registerViewer(e)})):this.registerViewer(e)}get(e){return this.viewers.get(e)}}var g=n(4453);const x=[{name:"singleChoice",item:()=>g.Cy.singleChoice({itemKey:"t1",parentKey:"test",questionText:u("Single Choice Example "),responseOptions:[{key:"1",content:u("My Option"),role:"option"}]}),prefill:{key:"rg",items:[{key:"scg",items:[{key:"t1"}]}]}},{name:"MultipleChoice",item:()=>g.Cy.multipleChoice({itemKey:"t2",parentKey:"test",questionText:u("Multiple Choice Example "),responseOptions:[{key:"1",content:u("Choice 1"),role:"option"},{key:"2",content:u("Choice 2"),role:"option"},{key:"3",content:u("Choice 3"),role:"option"}]})},{name:"MultipleChoiceExclusive",item:()=>{const e=g.Xq.multipleChoice.any("test.t3","1"),t=g.Xq.multipleChoice.any("test.t3","3");return g.Cy.multipleChoice({itemKey:"t3",parentKey:"test",questionText:u("Multiple choice with exclusive option"),responseOptions:[{key:"1",content:u("Choice 1"),role:"option",disabled:t},{key:"2",content:u("Choice 2"),role:"option"},{key:"3",content:u("Choice 3"),role:"option",disabled:e}]})}},{name:"MultipleChoiceOpenItem",item:()=>g.Cy.multipleChoice({itemKey:"t2",parentKey:"test",questionText:u("Multiple Choice Example "),responseOptions:[{key:"1",content:u("Choice 1"),role:"option"},{key:"2",content:u("Choice 2"),role:"option"},{key:"3",content:u("Choice 3"),role:"input"}]})},{name:"MultipleChoiceComplexOption",item:()=>g.Cy.multipleChoice({itemKey:"t2",parentKey:"test",questionText:u("Multiple Choice Example "),responseOptions:[{key:"1",role:"option",items:[{key:"1",role:"text",content:u("Main text of the option")},{key:"2",role:"text",content:u("Small text"),style:[{key:"className",value:"d-block fs-6"}]}]},{key:"2",content:u("Choice 2"),role:"option"},{key:"3",role:"option",items:[{key:"1",role:"text",content:u("text in bold"),style:[{key:"className",value:"fw-bold"}]},{key:"2",role:"text",content:u(" text in red"),style:[{key:"className",value:"text-danger"}]}]}]})},{name:"DropDownItem",item:()=>g.Cy.dropDown({itemKey:"t1",parentKey:"test",questionText:u("DropDown Example "),responseOptions:[{key:"1",content:u("Option One"),role:"option"},{key:"2",content:u("Option Two"),role:"option"},{key:"3",content:u("Option Three"),role:"option"}]})}],v=[{name:"dateInput",item:()=>g.Cy.dateInput({itemKey:"q1",parentKey:"test",questionText:u("A date question"),dateInputMode:"YMD"})},{name:"YearMonthInput",item:()=>g.Cy.dateInput({itemKey:"q2",parentKey:"test",questionText:u("A year month question"),dateInputMode:"YM"})},{name:"YearInput",item:()=>g.Cy.dateInput({itemKey:"q2",parentKey:"test",questionText:u("A year question"),dateInputMode:"Y"})}],f=[{name:"basicText",item:()=>g.Cy.display({itemKey:"t1",parentKey:"test",content:[{role:"text",content:[m("A very intersting text")]}]})},{name:"textComponent",item:()=>g.Cy.display({itemKey:"t1",parentKey:"test",content:[{role:"text",content:[m("A stylized text using 'h2' style variant")],style:[{key:"variant",value:"h2"}]},{role:"text",content:[m("A very intersting text")]}]})}],b=[{name:"TextInput",item:()=>g.Cy.textInput({itemKey:"t1",parentKey:"test",questionText:u("Simple text input"),placeholderText:u("Placeholder text")})},{name:"NumberInput",item:()=>g.Cy.numericInput({itemKey:"t2",parentKey:"test",inputLabel:u("Input label"),questionText:u("Number input question "),componentProperties:{min:0,max:120}})},{name:"MultilineTextInput",item:()=>g.Cy.multilineTextInput({itemKey:"t2",parentKey:"test",inputLabelText:u("My Input label "),questionText:u("Question with Multiline Text Input")})}],C=[{name:"MatrixDropDownItem",item:()=>g.Cy.responsiveMatrix({itemKey:"t2",parentKey:"test",questionText:u("Matrix with drop down"),breakpoint:"xl",responseType:"dropdown",rows:[{key:"r1",label:u("Row 1"),role:"row"},{key:"r2",label:u("Row 2"),role:"row"},{key:"r3",label:u("Row 3"),role:"row"}],columns:[{key:"c1",label:u("Col 1")},{key:"c2",label:u("Col 2")}],dropdownConfig:{unselectedLabeL:u("Choose"),options:[{key:"1",label:u("Choice 1")},{key:"2",label:u("Choice 2")}]}})},{name:"MatrixDropDownCategoryItem",item:()=>g.Cy.responsiveMatrix({itemKey:"t2",parentKey:"test",questionText:u("Matrix with drop down"),responseType:"dropdown",breakpoint:"xl",rows:[{key:"rc3",label:u("A category"),role:"category"},{key:"r1",label:u("Row 1"),role:"row"},{key:"r2",label:u("Row 2"),role:"row"},{key:"rc2",label:u("A second category"),role:"category"},{key:"r3",label:u("Row 3"),role:"row"},{key:"r4",label:u("Row 4"),role:"row"}],columns:[{key:"c1",label:u("Col 1")},{key:"c2",label:u("Col 2")}],dropdownConfig:{unselectedLabeL:u("Choose"),options:[{key:"1",label:u("Choice 1")},{key:"2",label:u("Choice 2")}]}})},{name:"MatrixInputItem",item:()=>g.Cy.responsiveMatrix({itemKey:"t2",parentKey:"test",questionText:u("Matrix with drop down"),breakpoint:"xl",responseType:"numberInput",rows:[{key:"r1",label:u("Row 1"),role:"row"},{key:"r2",label:u("Row 2"),role:"row"},{key:"r3",label:u("Row 3"),role:"row"}],columns:[{key:"c1",label:u("Col 1")},{key:"c2",label:u("Col 2")}]})}],w=[{name:"ClozeInput",item:()=>g.Cy.clozeQuestion({itemKey:"t1",parentKey:"test",questionText:u("Cloze question"),items:[{key:"0",role:"text",content:u("We can put a text and ask for an number")},{key:"1",role:"numberInput"},{key:"2",role:"text",content:u("Then we can continue with another text and ask for a date")},{key:"3",role:"dateInput"},{key:"4",role:"text",content:u("or a year-month")},{key:"5",role:"dateInput",optionProps:{dateInputMode:"YM"}},{key:"6",role:"text",content:u("or a drop down")},{key:"7",role:"dropDownGroup",items:[{key:"1",content:u("Option 1"),role:"option"},{key:"2",content:u("Option 1"),role:"option"}]}]})}],N=new h;N.add(x),N.add(v),N.add(f),N.add(b),N.add(C),N.add(w);const M=e=>{const t="function"==typeof e.expr?e.expr():e.expr,n=JSON.stringify(t,null,1);return i.createElement(s.Z,null,i.createElement(r.Z,{value:"code",label:"Code (case-editor-tools)"},i.createElement(l.Z,{language:"ts"}," ",e.codeSnippet," ")),i.createElement(r.Z,{value:"expr",label:"JSON"},i.createElement(l.Z,{language:"json"},n)))},_=[{name:"client:or",expr:()=>g.Xq.logic.or(g.Xq.hasResponse("intake.Q1","rg.scg.1"),g.Xq.hasResponse("intake.Q2","rg.scg.1"))},{name:"client:and",expr:()=>g.Xq.logic.and(g.Xq.hasResponse("intake.Q1","rg.scg.1"),g.Xq.hasResponse("intake.Q2","rg.scg.1"))},{name:"client:not",expr:()=>g.Xq.logic.not(g.Xq.hasResponse("intake.Q1","rg.scg.1"))},{name:"client:eq",expr:()=>g.Xq.compare.eq(g.Xq.getResponseValueAsNum("survey.age","rg.age"),20)},{name:"client:lt",expr:()=>g.Xq.compare.lt(g.Xq.getResponseValueAsNum("survey.age","rg.age"),20)},{name:"client:timestampWithOffset",expr:()=>g.Xq.timestampWithOffset({years:-1})},{name:"client:hasResponse",expr:()=>g.Xq.hasResponse("intake.Q5","rg.mcg")},{name:"client:getAttribute",expr:()=>g.Xq.getters.getAttribute(g.Xq.getters.getAttribute(g.Xq.getters.getContext(),"participantFlags"),"adult")},{name:"client:getAttribute2",expr:()=>g.Xq.participantFlags.hasKeyAndValue("adult","1")},{name:"client:checkResponseValueWithRegex",expr:()=>g.Xq.checkResponseValueWithRegex("intake.Q6","rg.1","/[0-9]{5}/")},{name:"client:responseHasKeysAll",expr:()=>g.Xq.responseHasKeysAll("intake.Q1","rg.mcg","cat","dog")},{name:"client:responseHasOnlyKeysOtherThan",expr:()=>g.Xq.responseHasOnlyKeysOtherThan("intake.Q1","rg.mcg","cat","dog")},{name:"i18n:dateResponseDiffFromNow",expr:()=>g.Xq.dateResponseDiffFromNow("survey.age","rg.date","years",!0)}],E=new h;E.add(_);const I=e=>(0,o.Z)()?(n(5577),(e=>{const t=N.get(e);return t?i.createElement(d,t):i.createElement("span",null,"Unknown component ",e)})(e.name)):"Only online",R=e=>(0,o.Z)()?(n(5577),(e=>{const t=E.get(e);return t?i.createElement(M,t):i.createElement("span",null,"Unknown component ",e)})(e.name)):"Only online"},5192:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>p,contentTitle:()=>r,default:()=>c,frontMatter:()=>s,metadata:()=>l,toc:()=>u});var o=n(7462),i=(n(7294),n(3905)),a=n(3373);const s={sidebar_label:"Expressions",sidebar_class_name:"green"},r="Survey Engine Expressions",l={unversionedId:"survey-handbook/survey-engine/expressions",id:"survey-handbook/survey-engine/expressions",title:"Survey Engine Expressions",description:"Expression is a a general concept used in several places of the Influenzanet Survey System.",source:"@site/docs/survey-handbook/survey-engine/03-expressions.mdx",sourceDirName:"survey-handbook/survey-engine",slug:"/survey-handbook/survey-engine/expressions",permalink:"/docs/survey-handbook/survey-engine/expressions",draft:!1,editUrl:"https://github.com/influenzanet/survey-handbook/docs/survey-handbook/survey-engine/03-expressions.mdx",tags:[],version:"current",sidebarPosition:3,frontMatter:{sidebar_label:"Expressions",sidebar_class_name:"green"},sidebar:"surveySidebar",previous:{title:"Option component",permalink:"/docs/survey-handbook/survey-engine/components/option"},next:{title:"Internationalization",permalink:"/docs/survey-handbook/survey-engine/i18n"}},p={},u=[{value:"Logical Expression",id:"logical-expression",level:2},{value:"Comparison operators",id:"comparison-operators",level:2},{value:"Utilities",id:"utilities",level:2},{value:"<code>isDefined</code>()",id:"isdefined",level:3},{value:"<code>getContext</code>()",id:"getcontext",level:3},{value:"<code>getAttribute</code>(object, name)",id:"getattributeobject-name",level:2},{value:"Responses expressions",id:"responses-expressions",level:2},{value:"<code>hasResponse</code>(item_key, rg_key):boolean",id:"hasresponseitem_key-rg_keyboolean",level:3},{value:"<code>getResponseValueAsNum</code>(item_key, rg_key):number",id:"getresponsevalueasnumitem_key-rg_keynumber",level:3},{value:"<code>getResponseValueAsStr</code>(item_key, rg_key): string",id:"getresponsevalueasstritem_key-rg_key-string",level:3},{value:"<code>responseHasKeysAny</code>(item_key, rg_key, option_key...):boolean",id:"responsehaskeysanyitem_key-rg_key-option_keyboolean",level:3},{value:"<code>responseHasKeysAll</code>(item_key, rg_key, option_key...):boolean",id:"responsehaskeysallitem_key-rg_key-option_keyboolean",level:3},{value:"<code>responseHasOnlyKeysOtherThan</code>(item_key, rg_key, option_key...):boolean",id:"responsehasonlykeysotherthanitem_key-rg_key-option_keyboolean",level:3},{value:"<code>checkResponseValueWithRegex</code>(item_key, rg_key, pattern ):boolean",id:"checkresponsevaluewithregexitem_key-rg_key-pattern-boolean",level:3},{value:"<code>countResponseItems</code>(item_key, rg_key):number",id:"countresponseitemsitem_key-rg_keynumber",level:3},{value:"Validation",id:"validation",level:2},{value:"<code>getSurveyItemValidation</code>(item_key, validation_key)",id:"getsurveyitemvalidationitem_key-validation_key",level:3},{value:"Time functions",id:"time-functions",level:2},{value:"<code>timestampWithOffset</code>(offset, refTime)",id:"timestampwithoffsetoffset-reftime",level:3},{value:"<code>getSecondsSince</code>(time):number",id:"getsecondssincetimenumber",level:3},{value:"<code>dateResponseDiffFromNow</code>(item_key, rg_key, ?unit, ?unsigned)",id:"dateResponseDiffFromNow",level:3},{value:"Low level expression",id:"low-level-expression",level:2},{value:"<code>getResponses</code>()",id:"getresponses",level:3},{value:"<code>getRenderedItems</code>()",id:"getrendereditems",level:3},{value:"<code>getArrayItemAtIndex</code>()",id:"getarrayitematindex",level:3},{value:"<code>getArrayItemByKey</code>()",id:"getarrayitembykey",level:3},{value:"<code>getObjByHierarchicalKey</code>()",id:"getobjbyhierarchicalkey",level:3},{value:"<code>getNestedObjectByKey</code>()",id:"getnestedobjectbykey",level:3},{value:"<code>findPreviousSurveyResponsesByKey</code>()",id:"findprevioussurveyresponsesbykey",level:3},{value:"<code>getLastFromSurveyResponses</code>()",id:"getlastfromsurveyresponses",level:3},{value:"<code>getPreviousResponses</code>()",id:"getpreviousresponses",level:3},{value:"<code>filterResponsesByIncludesKeys</code>()",id:"filterresponsesbyincludeskeys",level:3},{value:"<code>filterResponsesByValue</code>()",id:"filterresponsesbyvalue",level:3},{value:"<code>getLastFromSurveyItemResponses</code>()",id:"getlastfromsurveyitemresponses",level:3},{value:"<code>getResponseItem</code>()",id:"getresponseitem",level:3},{value:"<code>parseValueAsNum</code>(value):number",id:"parsevalueasnumvaluenumber",level:3}],m={toc:u},y="wrapper";function c(e){let{components:t,...n}=e;return(0,i.kt)(y,(0,o.Z)({},m,n,{components:t,mdxType:"MDXLayout"}),(0,i.kt)("h1",{id:"survey-engine-expressions"},"Survey Engine Expressions"),(0,i.kt)("p",null,"Expression is a a general concept used in several places of the Influenzanet Survey System.\nBefore reading this page you should read the ",(0,i.kt)("a",{parentName:"p",href:"../general/expressions"},"general concept of expressions"),"."),(0,i.kt)("h2",{id:"logical-expression"},"Logical Expression"),(0,i.kt)("p",null,"Logical expressions evaluate the logical operations using boolean result of one or several expression evaluated value.\nEach expression argument is evaluated and casted as boolean "),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},"Numerical result :  ",(0,i.kt)("inlineCode",{parentName:"li"},"true")," if ",">"," 0, and ",(0,i.kt)("inlineCode",{parentName:"li"},"false")," if ","<","= 0"),(0,i.kt)("li",{parentName:"ul"},"String result : ",(0,i.kt)("inlineCode",{parentName:"li"},"true")," if not empty, ",(0,i.kt)("inlineCode",{parentName:"li"},"false")," if empty (=='')")),(0,i.kt)("p",null,"Several operators are available:"),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"and"),"(e1, e2) : AND operator (",(0,i.kt)("inlineCode",{parentName:"li"},"true")," if e1 is ",(0,i.kt)("inlineCode",{parentName:"li"},"true")," AND if e2 is ",(0,i.kt)("inlineCode",{parentName:"li"},"true"),")"),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"or"),"(e1, e2) : OR operator (",(0,i.kt)("inlineCode",{parentName:"li"},"true")," if e1 is ",(0,i.kt)("inlineCode",{parentName:"li"},"true")," OR if e2 is ",(0,i.kt)("inlineCode",{parentName:"li"},"true"),")"),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"not"),"(e1): NOT operator (",(0,i.kt)("inlineCode",{parentName:"li"},"true")," if e1 is ",(0,i.kt)("inlineCode",{parentName:"li"},"false"),", ",(0,i.kt)("inlineCode",{parentName:"li"},"false")," if e1 is ",(0,i.kt)("inlineCode",{parentName:"li"},"true"),")")),(0,i.kt)(a.E,{name:"client:not",mdxType:"ExpressionViewer"}),(0,i.kt)("h2",{id:"comparison-operators"},"Comparison operators"),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"eq"),"(e1, e2, ..., en) : Equal operator, true if all operators are equals, if e1 === e2 (... === en)"),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"gt"),"(e1, e2) : Greater than operator (true if e1 ",">"," e2)"),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"gte"),"(e1, e2) : Greater or equal operator (true if e1 ",">","= e2)"),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"lt"),"(e1, e2) : Lower than operator (true if e1 ","<"," e2)"),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"lte"),"(e1, e2) : Lower or Equal operator (true if e1 ","<","e; e2)")),(0,i.kt)("p",null,"Nota: The Javascript implementation uses the '===' operator, checking for value AND type for equality."),(0,i.kt)(a.E,{name:"client:eq",mdxType:"ExpressionViewer"}),(0,i.kt)("h2",{id:"utilities"},"Utilities"),(0,i.kt)("h3",{id:"isdefined"},(0,i.kt)("inlineCode",{parentName:"h3"},"isDefined"),"()"),(0,i.kt)("p",null,"isDefined Operator test if an expression returns a defined value (i.e. the value is not ",(0,i.kt)("inlineCode",{parentName:"p"},"undefined")," nor ",(0,i.kt)("inlineCode",{parentName:"p"},"null")," for javascript engine)."),(0,i.kt)("h3",{id:"getcontext"},(0,i.kt)("inlineCode",{parentName:"h3"},"getContext"),"()"),(0,i.kt)("p",null,"getContext returns the current ",(0,i.kt)("a",{parentName:"p",href:"./context"},"Runtime Context"),", allowing to get Participant attributes "),(0,i.kt)("h2",{id:"getattributeobject-name"},(0,i.kt)("inlineCode",{parentName:"h2"},"getAttribute"),"(object, name)"),(0,i.kt)("p",null,"Extract a attribute from an object"),(0,i.kt)("p",null,"This is a low level function Common case is to extract attribute from the context, to check for a Participant flag."),(0,i.kt)(a.E,{name:"client:getAttribute",mdxType:"ExpressionViewer"}),(0,i.kt)("p",null,"Fortunately CASE Editor Tools provides some helpers to generate such complex expressions"),(0,i.kt)(a.E,{name:"client:getAttribute2",mdxType:"ExpressionViewer"}),(0,i.kt)("h2",{id:"responses-expressions"},"Responses expressions"),(0,i.kt)("p",null,"These expressions are used to get and test the current survey responses."),(0,i.kt)("h3",{id:"hasresponseitem_key-rg_keyboolean"},(0,i.kt)("inlineCode",{parentName:"h3"},"hasResponse"),"(item_key, rg_key):boolean"),(0,i.kt)("p",null,"Check if an item has a specific response object (by key)"),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"item_key"),": key of the item (question)"),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"rg_key")," : path of the response component from the root in the question ")),(0,i.kt)(a.E,{name:"client:hasResponse",mdxType:"ExpressionViewer"}),(0,i.kt)("h3",{id:"getresponsevalueasnumitem_key-rg_keynumber"},(0,i.kt)("inlineCode",{parentName:"h3"},"getResponseValueAsNum"),"(item_key, rg_key):number"),(0,i.kt)("p",null,"Get the response value of an Response component of an Item, and parse it as numeric value"),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"item_key"),": key of the item (question)"),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"rg_key")," : path of the response component in the item.")),(0,i.kt)("h3",{id:"getresponsevalueasstritem_key-rg_key-string"},(0,i.kt)("inlineCode",{parentName:"h3"},"getResponseValueAsStr"),"(item_key, rg_key): string"),(0,i.kt)("p",null,"Get the response value of an Response component of an Item as a string"),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"item_key"),": key of the item (question)"),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"rg_key")," : path of the response component in the item.")),(0,i.kt)("h3",{id:"responsehaskeysanyitem_key-rg_key-option_keyboolean"},(0,i.kt)("inlineCode",{parentName:"h3"},"responseHasKeysAny"),"(item_key, rg_key, option_key...):boolean"),(0,i.kt)("p",null,"Test if the response component of a item as any response key from the option_key list of value.\nThis expression is used to test if the current response of a categorical component have at least one response in a given list\noptions are identified by their key value."),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"item_key"),": key of the item (question)"),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"rg_key")," : path of the response component in the item."),(0,i.kt)("li",{parentName:"ul"},"option_key... : one or several key of option  ")),(0,i.kt)("h3",{id:"responsehaskeysallitem_key-rg_key-option_keyboolean"},(0,i.kt)("inlineCode",{parentName:"h3"},"responseHasKeysAll"),"(item_key, rg_key, option_key...):boolean"),(0,i.kt)("p",null,"Same as ",(0,i.kt)("inlineCode",{parentName:"p"},"responseHasKeysAny"),", but test if the current response include all the provided option key"),(0,i.kt)("p",null,"For example, if the question intake.Q1 has the current response 'cat' ",(0,i.kt)("strong",{parentName:"p"},"AND")," 'dog'"),(0,i.kt)(a.E,{name:"client:responseHasKeysAll",mdxType:"ExpressionViewer"}),(0,i.kt)("h3",{id:"responsehasonlykeysotherthanitem_key-rg_key-option_keyboolean"},(0,i.kt)("inlineCode",{parentName:"h3"},"responseHasOnlyKeysOtherThan"),"(item_key, rg_key, option_key...):boolean"),(0,i.kt)("p",null,"Same as ",(0,i.kt)("inlineCode",{parentName:"p"},"responseHasKeysAny"),", but test if the current response ",(0,i.kt)("strong",{parentName:"p"},"DOES NOT")," include any option key in the provided list"),(0,i.kt)(a.E,{name:"client:responseHasOnlyKeysOtherThan",mdxType:"ExpressionViewer"}),(0,i.kt)("h3",{id:"checkresponsevaluewithregexitem_key-rg_key-pattern-boolean"},(0,i.kt)("inlineCode",{parentName:"h3"},"checkResponseValueWithRegex"),"(item_key, rg_key, pattern ):boolean"),(0,i.kt)("p",null,"Check if the response of an item match a the given Regular Expression pattern. The pattern is using ",(0,i.kt)("a",{href:"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Guide/Regular_expressions"},"Javascript ECMAScript Regular Expression")),(0,i.kt)(a.E,{name:"client:checkResponseValueWithRegex",mdxType:"ExpressionViewer"}),(0,i.kt)("h3",{id:"countresponseitemsitem_key-rg_keynumber"},(0,i.kt)("inlineCode",{parentName:"h3"},"countResponseItems"),"(item_key, rg_key):number"),(0,i.kt)("p",null,"Count the number of responses selected in a Response component of an item."),(0,i.kt)("p",null,"If the item is not found or no response is provided yet, the expression will return -1 value."),(0,i.kt)("h2",{id:"validation"},"Validation"),(0,i.kt)("h3",{id:"getsurveyitemvalidationitem_key-validation_key"},(0,i.kt)("inlineCode",{parentName:"h3"},"getSurveyItemValidation"),"(item_key, validation_key)"),(0,i.kt)("h2",{id:"time-functions"},"Time functions"),(0,i.kt)("h3",{id:"timestampwithoffsetoffset-reftime"},(0,i.kt)("inlineCode",{parentName:"h3"},"timestampWithOffset"),"(offset, refTime)"),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"offset")," is the number of seconds to add to the reference time "),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"refTime")," is the reference time (if not provided the current time will be used)")),(0,i.kt)("p",null,"Both are evaluated to number but they can be expressions."),(0,i.kt)(a.E,{name:"client:timestampWithOffset",mdxType:"ExpressionViewer"}),(0,i.kt)("h3",{id:"getsecondssincetimenumber"},(0,i.kt)("inlineCode",{parentName:"h3"},"getSecondsSince"),"(time):number"),(0,i.kt)("p",null,"Returns the number of seconds from the given time and the current time."),(0,i.kt)("p",null,"time must be evaluated to a Unix timestamp (number of seconds since 1970-01-01), it can be an expression returning the timestamp (Date and time response component returns response as timestamp value)"),(0,i.kt)("h3",{id:"dateResponseDiffFromNow"},(0,i.kt)("inlineCode",{parentName:"h3"},"dateResponseDiffFromNow"),"(item_key, rg_key, ?unit, ?unsigned)"),(0,i.kt)("p",null,"Evaluate time difference from now using response of an item"),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"item_key"),": key of the item (question)"),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"rg_key")," : path of the response component from the root in the question (always starts with 'rg.' representing the Response Group Component)"),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"unit")," : time unit to use as output, accepted values are 'years', 'months', 'weeks', 'hours', 'minutes', 'seconds'"),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"unsigned"),":  flag to have a unsigned result (ignore sign of the result) if the value is evaluated to true (e.g. 1), otherwise result can output negative value.")),(0,i.kt)("h2",{id:"low-level-expression"},"Low level expression"),(0,i.kt)("p",null,"Most of the time you wont need these expression, but in some case it's necessary to use them."),(0,i.kt)("h3",{id:"getresponses"},(0,i.kt)("inlineCode",{parentName:"h3"},"getResponses"),"()"),(0,i.kt)("h3",{id:"getrendereditems"},(0,i.kt)("inlineCode",{parentName:"h3"},"getRenderedItems"),"()"),(0,i.kt)("h3",{id:"getarrayitematindex"},(0,i.kt)("inlineCode",{parentName:"h3"},"getArrayItemAtIndex"),"()"),(0,i.kt)("h3",{id:"getarrayitembykey"},(0,i.kt)("inlineCode",{parentName:"h3"},"getArrayItemByKey"),"()"),(0,i.kt)("h3",{id:"getobjbyhierarchicalkey"},(0,i.kt)("inlineCode",{parentName:"h3"},"getObjByHierarchicalKey"),"()"),(0,i.kt)("h3",{id:"getnestedobjectbykey"},(0,i.kt)("inlineCode",{parentName:"h3"},"getNestedObjectByKey"),"()"),(0,i.kt)("h3",{id:"findprevioussurveyresponsesbykey"},(0,i.kt)("inlineCode",{parentName:"h3"},"findPreviousSurveyResponsesByKey"),"()"),(0,i.kt)("h3",{id:"getlastfromsurveyresponses"},(0,i.kt)("inlineCode",{parentName:"h3"},"getLastFromSurveyResponses"),"()"),(0,i.kt)("h3",{id:"getpreviousresponses"},(0,i.kt)("inlineCode",{parentName:"h3"},"getPreviousResponses"),"()"),(0,i.kt)("h3",{id:"filterresponsesbyincludeskeys"},(0,i.kt)("inlineCode",{parentName:"h3"},"filterResponsesByIncludesKeys"),"()"),(0,i.kt)("h3",{id:"filterresponsesbyvalue"},(0,i.kt)("inlineCode",{parentName:"h3"},"filterResponsesByValue"),"()"),(0,i.kt)("h3",{id:"getlastfromsurveyitemresponses"},(0,i.kt)("inlineCode",{parentName:"h3"},"getLastFromSurveyItemResponses"),"()"),(0,i.kt)("h3",{id:"getresponseitem"},(0,i.kt)("inlineCode",{parentName:"h3"},"getResponseItem"),"()"),(0,i.kt)("h3",{id:"parsevalueasnumvaluenumber"},(0,i.kt)("inlineCode",{parentName:"h3"},"parseValueAsNum"),"(value):number"),(0,i.kt)("p",null,"Evaluate the argument value (can be an expression), and parse it to number"))}c.isMDXComponent=!0}}]);