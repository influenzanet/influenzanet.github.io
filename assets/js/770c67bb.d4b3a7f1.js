"use strict";(self.webpackChunkifn_survey_handbook=self.webpackChunkifn_survey_handbook||[]).push([[6478],{3905:(e,n,t)=>{t.d(n,{Zo:()=>u,kt:()=>y});var r=t(7294);function s(e,n,t){return n in e?Object.defineProperty(e,n,{value:t,enumerable:!0,configurable:!0,writable:!0}):e[n]=t,e}function o(e,n){var t=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);n&&(r=r.filter((function(n){return Object.getOwnPropertyDescriptor(e,n).enumerable}))),t.push.apply(t,r)}return t}function a(e){for(var n=1;n<arguments.length;n++){var t=null!=arguments[n]?arguments[n]:{};n%2?o(Object(t),!0).forEach((function(n){s(e,n,t[n])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(t)):o(Object(t)).forEach((function(n){Object.defineProperty(e,n,Object.getOwnPropertyDescriptor(t,n))}))}return e}function i(e,n){if(null==e)return{};var t,r,s=function(e,n){if(null==e)return{};var t,r,s={},o=Object.keys(e);for(r=0;r<o.length;r++)t=o[r],n.indexOf(t)>=0||(s[t]=e[t]);return s}(e,n);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);for(r=0;r<o.length;r++)t=o[r],n.indexOf(t)>=0||Object.prototype.propertyIsEnumerable.call(e,t)&&(s[t]=e[t])}return s}var p=r.createContext({}),l=function(e){var n=r.useContext(p),t=n;return e&&(t="function"==typeof e?e(n):a(a({},n),e)),t},u=function(e){var n=l(e.components);return r.createElement(p.Provider,{value:n},e.children)},c="mdxType",d={inlineCode:"code",wrapper:function(e){var n=e.children;return r.createElement(r.Fragment,{},n)}},m=r.forwardRef((function(e,n){var t=e.components,s=e.mdxType,o=e.originalType,p=e.parentName,u=i(e,["components","mdxType","originalType","parentName"]),c=l(t),m=s,y=c["".concat(p,".").concat(m)]||c[m]||d[m]||o;return t?r.createElement(y,a(a({ref:n},u),{},{components:t})):r.createElement(y,a({ref:n},u))}));function y(e,n){var t=arguments,s=n&&n.mdxType;if("string"==typeof e||s){var o=t.length,a=new Array(o);a[0]=m;var i={};for(var p in n)hasOwnProperty.call(n,p)&&(i[p]=n[p]);i.originalType=e,i[c]="string"==typeof e?e:s,a[1]=i;for(var l=2;l<o;l++)a[l]=t[l];return r.createElement.apply(null,a)}return r.createElement.apply(null,t)}m.displayName="MDXCreateElement"},6817:(e,n,t)=>{t.r(n),t.d(n,{assets:()=>p,contentTitle:()=>a,default:()=>d,frontMatter:()=>o,metadata:()=>i,toc:()=>l});var r=t(7462),s=(t(7294),t(3905));const o={sidebar_label:"Response data"},a="Response Data",i={unversionedId:"survey-handbook/study-service/responses",id:"survey-handbook/study-service/responses",title:"Response Data",description:"General structure",source:"@site/docs/survey-handbook/study-service/04-responses.md",sourceDirName:"survey-handbook/study-service",slug:"/survey-handbook/study-service/responses",permalink:"/docs/survey-handbook/study-service/responses",draft:!1,editUrl:"https://github.com/influenzanet/survey-handbook/docs/survey-handbook/study-service/04-responses.md",tags:[],version:"current",sidebarPosition:4,frontMatter:{sidebar_label:"Response data"},sidebar:"surveySidebar",previous:{title:"Study Rules",permalink:"/docs/survey-handbook/study-service/study-rules"},next:{title:"Report data",permalink:"/docs/survey-handbook/study-service/reports"}},p={},l=[{value:"General structure",id:"general-structure",level:2},{value:"ItemResponse",id:"itemresponse",level:2}],u={toc:l},c="wrapper";function d(e){let{components:n,...t}=e;return(0,s.kt)(c,(0,r.Z)({},u,t,{components:n,mdxType:"MDXLayout"}),(0,s.kt)("h1",{id:"response-data"},"Response Data"),(0,s.kt)("h2",{id:"general-structure"},"General structure"),(0,s.kt)("p",null,"Each survey response will create a new entry in the ",(0,s.kt)("a",{parentName:"p",href:"./#database"},"surveyResponses collection")),(0,s.kt)("pre",null,(0,s.kt)("code",{parentName:"pre",className:"language-ts"},"{\n    participantID: string, // name of the participant who responded to the survey\n    key: string, // Key of the survey \n    versionID: string, // String identifying the version of the survey (same key in Survey collection)\n    openedAt: int, // Timesptamp when survey has been Opened on the client (seconds)\n    submittedAt: int, // Timestamp when survey has been submited on the client (seconds)\n    arrivedAt: int, // Server timestamp when the survey has arrived in the backend ?\n    context: Record<string,string> // Key values info about the filling context\n    responses: ItemResponse[] // List of ItemResponse object,\n}\n")),(0,s.kt)("p",null,"Context contains several common keys:"),(0,s.kt)("ul",null,(0,s.kt)("li",{parentName:"ul"},(0,s.kt)("inlineCode",{parentName:"li"},"language")," : Code of the language used to render the survey"),(0,s.kt)("li",{parentName:"ul"},(0,s.kt)("inlineCode",{parentName:"li"},"engineVersion"),": Version of the survey-engine library"),(0,s.kt)("li",{parentName:"ul"},(0,s.kt)("inlineCode",{parentName:"li"},"session"),": Session id if the survey is run under a SurveySession")),(0,s.kt)("h2",{id:"itemresponse"},"ItemResponse"),(0,s.kt)("p",null,"Each ",(0,s.kt)("inlineCode",{parentName:"p"},"responses")," entry is an object corresponding to the output of each ",(0,s.kt)("a",{parentName:"p",href:"../survey-engine/item"},"SurveyItem")),(0,s.kt)("p",null,"An ItemResponse contains:"),(0,s.kt)("pre",null,(0,s.kt)("code",{parentName:"pre",className:"language-ts"},"    key: string, // item key\n    meta: ResponseMeta // Metadata about the response of this item\n    items?: ItemResponse[] // If item is a group item, it can contains sub items response\n    response?: Response // If item is Single Item\n    confidentialMode: string\n")),(0,s.kt)("p",null,"This structure can be hierarchical for complex surveys. "),(0,s.kt)("p",null,"In case of a single item response, the response field will contains the output of each Response components (defining data entry, an item can contains several response components in its Response Group)."),(0,s.kt)("p",null,"Response object is defined as :"),(0,s.kt)("pre",null,(0,s.kt)("code",{parentName:"pre",className:"language-ts"},"{\n    key: string // Key of the response component\n    value?: string // Value of the response (if SingleItemComponent, will not be defined otherwise), if component is not key based\n    dtype?: string // Data type of the value, if provided (can be omitted for string/number)\n    items: Response[] // Children components response\n}\n")),(0,s.kt)("p",null,"The reponse is in the tree : The structure of the response will depend on how components are organized in the item.\nThe simplest will only have 2 levels : 'rg' component (for ResponseGroup) and "),(0,s.kt)("p",null,"Remember that, all items have ",(0,s.kt)("strong",{parentName:"p"},"one")," root ResponseGroup component always called ",(0,s.kt)("inlineCode",{parentName:"p"},"rg"),", the response structure will always have\nan ",(0,s.kt)("inlineCode",{parentName:"p"},"rg")," entry as root response key, and then the response of children components in items."),(0,s.kt)("p",null,"Some components, like categorical inputs (SingleChoiceGroup, MultipleChoiceGroup) will returns the key of the selected response(s) and dont provide value."),(0,s.kt)("p",null,"For example, a SingleResponseGroup, will output this kind of structure if the response option with key '1' is selected:"),(0,s.kt)("pre",null,(0,s.kt)("code",{parentName:"pre",className:"language-json"},'{\n    "key":"rg",\n    "items: [\n        {\n            "key":"scg",\n            items: [\n                { "key": "1" }\n            ]\n        }\n    ]\n}\n')))}d.isMDXComponent=!0}}]);