"use strict";(self.webpackChunkifn_survey_handbook=self.webpackChunkifn_survey_handbook||[]).push([[538],{3905:(e,n,t)=>{t.d(n,{Zo:()=>u,kt:()=>y});var r=t(7294);function a(e,n,t){return n in e?Object.defineProperty(e,n,{value:t,enumerable:!0,configurable:!0,writable:!0}):e[n]=t,e}function o(e,n){var t=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);n&&(r=r.filter((function(n){return Object.getOwnPropertyDescriptor(e,n).enumerable}))),t.push.apply(t,r)}return t}function i(e){for(var n=1;n<arguments.length;n++){var t=null!=arguments[n]?arguments[n]:{};n%2?o(Object(t),!0).forEach((function(n){a(e,n,t[n])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(t)):o(Object(t)).forEach((function(n){Object.defineProperty(e,n,Object.getOwnPropertyDescriptor(t,n))}))}return e}function s(e,n){if(null==e)return{};var t,r,a=function(e,n){if(null==e)return{};var t,r,a={},o=Object.keys(e);for(r=0;r<o.length;r++)t=o[r],n.indexOf(t)>=0||(a[t]=e[t]);return a}(e,n);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);for(r=0;r<o.length;r++)t=o[r],n.indexOf(t)>=0||Object.prototype.propertyIsEnumerable.call(e,t)&&(a[t]=e[t])}return a}var l=r.createContext({}),p=function(e){var n=r.useContext(l),t=n;return e&&(t="function"==typeof e?e(n):i(i({},n),e)),t},u=function(e){var n=p(e.components);return r.createElement(l.Provider,{value:n},e.children)},c="mdxType",d={inlineCode:"code",wrapper:function(e){var n=e.children;return r.createElement(r.Fragment,{},n)}},m=r.forwardRef((function(e,n){var t=e.components,a=e.mdxType,o=e.originalType,l=e.parentName,u=s(e,["components","mdxType","originalType","parentName"]),c=p(t),m=a,y=c["".concat(l,".").concat(m)]||c[m]||d[m]||o;return t?r.createElement(y,i(i({ref:n},u),{},{components:t})):r.createElement(y,i({ref:n},u))}));function y(e,n){var t=arguments,a=n&&n.mdxType;if("string"==typeof e||a){var o=t.length,i=new Array(o);i[0]=m;var s={};for(var l in n)hasOwnProperty.call(n,l)&&(s[l]=n[l]);s.originalType=e,s[c]="string"==typeof e?e:a,i[1]=s;for(var p=2;p<o;p++)i[p]=t[p];return r.createElement.apply(null,i)}return r.createElement.apply(null,t)}m.displayName="MDXCreateElement"},394:(e,n,t)=>{t.r(n),t.d(n,{assets:()=>l,contentTitle:()=>i,default:()=>d,frontMatter:()=>o,metadata:()=>s,toc:()=>p});var r=t(7462),a=(t(7294),t(3905));const o={sidebar_label:"Internationalization",sidebar_class_name:"green"},i="Internationalization",s={unversionedId:"survey-engine/i18n",id:"survey-engine/i18n",title:"Internationalization",description:"In a survey definition, textual contents are provided using a special structure called Localized text.",source:"@site/docs/survey-engine/04-i18n.md",sourceDirName:"survey-engine",slug:"/survey-engine/i18n",permalink:"/survey-handbook/docs/survey-engine/i18n",draft:!1,editUrl:"https://github.com/influenzanet/survey-handbook/docs/survey-engine/04-i18n.md",tags:[],version:"current",sidebarPosition:4,frontMatter:{sidebar_label:"Internationalization",sidebar_class_name:"green"},sidebar:"tutorialSidebar",previous:{title:"Expressions",permalink:"/survey-handbook/docs/survey-engine/expressions"},next:{title:"Runtime context",permalink:"/survey-handbook/docs/survey-engine/context"}},l={},p=[],u={toc:p},c="wrapper";function d(e){let{components:n,...t}=e;return(0,a.kt)(c,(0,r.Z)({},u,t,{components:n,mdxType:"MDXLayout"}),(0,a.kt)("h1",{id:"internationalization"},"Internationalization"),(0,a.kt)("p",null,"In a survey definition, textual contents are provided using a special structure called Localized text.\nThis structure embeds texts for each language."),(0,a.kt)("p",null,"An example of Localized text :"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-json"},'{\n    "code":"language-code",\n    "parts: [\n        "Age"\n    ]\n}\n\n')),(0,a.kt)("p",null,"Note that the ",(0,a.kt)("inlineCode",{parentName:"p"},"parts")," field is an array, which can contains several entries. Each entry can be a string (literal text), a number or an ",(0,a.kt)("a",{parentName:"p",href:"./expressions"},"ExpressionArg"),"."),(0,a.kt)("p",null,"An Expression can be used to embeds dynamic text in the translation (the textual value is computed using an expression)."),(0,a.kt)("p",null,"Common example is to show the text containing the duration from a response of a question. We can take the example of the age question."),(0,a.kt)("p",null,"The age is collected from an Year-Month component, to improve input validation we want to show the age (in years corresponding to the entered date). To do this we can defined a Localized text containing the expression calculating the age from the entered data in the year-month component."),(0,a.kt)("p",null,"Let's say the question is named 'survey.age' and the date input has the component key 'date'"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-json"},'{\n    "code":"en"\n    "parts":[\n        "Your age is",\n        {\n            "dtype": "exp",\n            "exp": {\n            "name": "dateResponseDiffFromNow",\n            "data": [\n                {"dtype": "str", "str": "survey.age"},\n                {"dtype": "str", "str": "rg.date"},\n                {"dtype": "str", "str": "years"},\n                {"dtype": "num", "num": 1 }\n            ]\n            }\n        },\n        "years old"\n    ]\n}\n')),(0,a.kt)("p",null,"Using a function call-like representation, this expression is :"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre"},"    dateResponseDiffFromNow('survey.age', 'rg.date', 'years', 1)\n")),(0,a.kt)("p",null,(0,a.kt)("inlineCode",{parentName:"p"},"dateResponseDiffFromNow")," compute the time difference from the response in a component (identified by the 2 first arguments, question key ",(0,a.kt)("inlineCode",{parentName:"p"},"survey.age")," and component key ",(0,a.kt)("inlineCode",{parentName:"p"},"rg.date")," inside this question), the time unit ",(0,a.kt)("inlineCode",{parentName:"p"},"years")," and the direction (1=always output a positive duration)\nIt's described in ",(0,a.kt)("a",{parentName:"p",href:"./expressions#dateResponseDiffFromNow"},"Expressions")),(0,a.kt)("p",null,"Fortunately you dont have to write such a json, it's possible to use case-editor-tools library to generate such expression:"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-ts"},'import { SurveyEngine  } from "case-editor-tools/surveys";\nSurveyEngine.dateResponseDiffFromNow("survey.age","rg.date", "years", true)\n')))}d.isMDXComponent=!0}}]);